{"version":3,"sources":["constants.js","components/board/boardUtils.js","components/board/boardReducer.js","components/themeToggle/themeToggleReducer.js","store.js","components/game/gameReducer.js","components/scoreBoard/scoreBoardReducer.js","components/gameOver/gameOverStyle.js","components/gameOver/GameOver.js","components/scoreBoard/scoreBoardActions.js","components/score/Score.js","components/game/gameThunkCreators.js","api/api.js","components/game/gameActions.js","components/nameForm/nameFormThunkCreators.js","components/nameForm/nameFormUtils.js","components/nameForm/NameForm.js","components/scoreBoard/scoreBoardUtils.js","components/scoreBoard/ScoreBoard.js","components/game/gameUtils.js","components/square/squareUtils.js","components/square/Square.js","components/board/boardActions.js","components/board/boardActionCreators.js","components/board/Board.js","components/themeToggle/themeToggleStyle.js","components/themeToggle/ThemeToggle.js","components/themeToggle/themeToggleUtils.js","components/mobileControls/mobileControlsUtils.js","components/mobileControls/MobileControls.js","components/game/Game.js","index.js"],"names":["envMap","img","process","coin","game_over_img","IMG","REACT_APP_DEV_IMG_PATH","REACT_APP_DEV_COIN_IMG_PATH","REACT_APP_DEV_GAME_OVER_GIRL_PATH","REACT_APP_TEST_IMG_PATH","REACT_APP_TEST_COIN_IMG_PATH","REACT_APP_TEST_GAME_OVER_GIRL_PATH","COIN","GAME_OVER_IMG","KEY_DOWN_SET_UP","type","posChange","pressed","OUT_OF_RANGE_SETUP","THEMES","SMALL_SCREEN","SCREEN_SIZES","generateCoinPos","magePos","size","boardSize","Math","pow","coinPos","floor","random","startingPos","mage","Array","fill","reduce","obj","item","index","squareObj","value","id","getInitState","Constants","initState","initPositions","initKeysPressed","Object","keys","forEach","key","initTimer","theme","rootReducer","combineReducers","squares","state","action","currentMagePos","newMagePos","newCoinPos","coinImg","coinAndMagePos","position","gameOver","isOver","score","timer","timerId","keysPressed","keyId","scoreboard","scoreBoardRows","topScores","scores","swapScoreBoard","doSwap","userName","themeToggle","store","createStore","applyMiddleware","thunkMiddleware","styles","small","gameovergirl","width","height","large","GameOver","props","dispatch","useDispatch","isNewTopTenScore","useSelector","console","log","screenSize","React","useEffect","handleKeyDown","event","keyCode","window","addEventListener","removeEventListener","className","src","style","alt","renderScore","onClick","isSwap","Score","user","getScoreBoardThunk","partitionKey","howMany","axios","params","headers","error","getScoreboardRows","then","response","getTopSortedScores","data","processedData","getOnlyScores","onlyScores","catch","err","alert","message","setNewScoreThunk","postNewScore","status","handleSubmit","whichIndex","itemAtIndex","preventDefault","trim","length","test","confirmUserName","prompt","toLowerCase","NameForm","onSubmit","onChange","setUserName","target","checkForNewRecord","topScoresArray","boardLength","newRecordSet","topScoresArr","minNum","min","minNumsCount","accum","currVal","getCountOfMinNums","i","Scoreboard","scoreBoardResults","ScoreBoardUtils","rowElements","rows","row","push","User","renderBoard","Board","class","renderGameOverBoard","renderGameOver","msg","getScoreMessage","scoresObj","scoreBoardArray","entries","parseInt","sort","sortScores","slice","a","b","scoreA","scoreB","getScreenSize","innerWidth","getImage","whichImage","image","Square","dataTestId","setKeysDown","isKeyDown","decrementTimer","makeMove","Actions","setTimeout","tick","startDecrementCounter","isScored","Utils","isGameOver","includes","updateStateWhenScored","updateStateWhenMove","curMagePos","curPos","newPos","passProps","keyDowns","isMoveMade","keysState","checkForKeys","keysFromSetUp","isInCodes","keyObj","e","handleKeyUp","registerMove","board","squaresObj","rowLength","rowEndIndex","j","generateBoard","button","svg","circleSun","circleMoon","ThemeToggle","switchTo","isLight","baseClassName","document","body","classList","remove","add","updateBodyThemeClass","toUpperCase","stroke","x1","y1","x2","y2","moonoverlay","callMakeMove","keyDownCode","MobileControls","Game","time","useState","setWindowSize","handleWindowResize","isSmall","clearTimeout","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1c25af76.chunk.js","sourcesContent":["export const BOARD_SIZE = 5;\nexport const MAGE_START_POS = 12;\n\nconst envMap = {\n    production : {\n        img: process.env.REACT_APP_PROD_IMG_PATH,\n        coin: process.env.REACT_APP_PROD_COIN_IMG_PATH,\n        game_over_img: process.env.REACT_APP_PROD_GAME_OVER_GIRL_PATH\n    },\n    development : {\n        img: process.env.REACT_APP_DEV_IMG_PATH,\n        coin: process.env.REACT_APP_DEV_COIN_IMG_PATH,\n        game_over_img: process.env.REACT_APP_DEV_GAME_OVER_GIRL_PATH\n    },\n    test: {\n        img: process.env.REACT_APP_TEST_IMG_PATH,\n        coin: process.env.REACT_APP_TEST_COIN_IMG_PATH,\n        game_over_img: process.env.REACT_APP_TEST_GAME_OVER_GIRL_PATH\n    }\n};\nexport const IMG = envMap[process.env.NODE_ENV].img;\nexport const COIN = envMap[process.env.NODE_ENV].coin;\nexport const GAME_OVER_IMG = envMap[process.env.NODE_ENV].game_over_img;\n\nexport const SCOREBOARD_RESULTS_ENDPOINT = process.env.REACT_APP_SCOREBOARD_RESULTS_ENDPOINT;\nexport const POST_NEW_SCORE_ENDPOINT = process.env.REACT_APP_POST_NEW_SCORE_ENDPOINT;\nexport const PARTITION_KEY = process.env.REACT_APP_PARTITION_KEY;\n\nexport const BUTTON_SETUP = {\n    left: {\n        type: \"MOVE_LEFT\",\n        posChange: 1\n    },\n    up: {\n        type: \"MOVE_UP\",\n        posChange: 5\n    },\n    right: {\n        type: \"MOVE_RIGHT\",\n        posChange: -1\n    },\n    down: {\n        type: \"MOVE_DOWN\",\n        posChange: -5\n    }\n};\n\nexport const KEY_DOWN_SET_UP = {\n    \"37\": {\n        type: \"MOVE_LEFT\",\n        posChange: 1,\n        pressed: false\n    },\n    \"38\": {\n        type: \"MOVE_UP\",\n        posChange: 5,\n        pressed: false\n    },\n    \"39\": {\n        type: \"MOVE_RIGHT\",\n        posChange: -1,\n        pressed: false\n    },\n    \"40\": {\n        type: \"MOVE_DOWN\",\n        posChange: -5,\n        pressed: false\n    }\n};\n\n//range of indexes moving from which\n//we will get out of range and game will be over\nexport const OUT_OF_RANGE_SETUP = {\n    \"1\": [0, 5, 10, 15, 20],\n    \"5\": [0, 1, 2, 3, 4],\n    \"-1\": [4, 9, 14, 19, 24],\n    \"-5\": [20, 21, 22, 23, 24]\n};\n\nexport const scoreBoardLength = 10;\n\nexport const THEMES = {\n    dark: \"dark\",\n    light: \"light\"\n};\n\nexport const SMALL_SCREEN = {\n    width: 450,\n    height: 667\n};\n\nexport const SCREEN_SIZES = {\n    small: \"small\",\n    large: \"large\"\n};","import React from \"react\";\nimport { OUT_OF_RANGE_SETUP } from \"../../constants.js\";\n\nexport const checkForKeys = (keysState) => {\n    let keysPressed = 0;\n    Object.keys(keysState).forEach(\n        key => {\n            if (keysState[key].pressed === true) {\n                keysPressed += 1;\n            }\n        });\n\n    const isMoveMade = keysPressed === 1 ? true : false;\n    return [isMoveMade];\n};\n\nexport const getInitState = (size, startingPos, mage, coin) => {\n    const coinPos = generateCoinPos(startingPos, size);\n    const boardSize = Math.pow(size, 2);\n    const initObj = {};\n\n    const initState = Array(boardSize).fill(null).reduce(\n        (obj, item, index) => {\n\n            const setMage = startingPos === index\n                ? mage\n                : null;\n\n            const setCoin = coinPos === index\n                ? coin\n                : null;\n\n            const squareObj = {\n                value: null,\n                id: index,\n                mage: setMage,\n                coin: setCoin\n            };\n\n            return {\n                ...obj,\n                [index]: squareObj\n            };\n        }, initObj\n    );\n\n    return [initState, coinPos];\n};\n\nexport const generateBoard = (squaresObj, Square, rowLength) => {\n    const keys = Object.keys(squaresObj);\n    const board = [];\n\n    for (let i = 0; i < keys.length; i += rowLength) {\n\n        const rowEndIndex = i + rowLength;\n        let row = [];\n\n        for (let j = i; j < rowEndIndex; j++) {\n            row.push(\n                <Square\n                    key={j}\n                    id={j}\n                    squareObj={squaresObj[j]}\n                    dataTestId={j}\n                />\n            );\n        }\n\n        board.push(\n            <div key={i} className=\"board-row\">\n                {row}\n            </div>\n        );\n\n    }\n    return board;\n};\n\n\nexport const isOutOfRange = (magePos, posChange) => {\n    const outRangeList = OUT_OF_RANGE_SETUP[`${posChange}`];\n    return outRangeList.includes(magePos);\n};\n\n\nexport const hasScored = (coinAndMagePos, posChange) => {\n    const newMagePos = coinAndMagePos.mage - posChange;\n    const result = newMagePos === coinAndMagePos.coin\n        ? true\n        : false;\n    return result;\n};\n\n\nexport const generateCoinPos = (magePos, size) => {\n    const boardSize = Math.pow(size, 2);\n    const coinPos = Math.floor(Math.random() * boardSize);\n\n    if (coinPos === magePos) {\n        const backUpPos = generateCoinPos(magePos, size);\n        return backUpPos;\n\n    } else {\n        return coinPos;\n    }\n};\n","import * as Constants from \"../../constants.js\";\nimport { getInitState } from \"./boardUtils.js\";\n\n// since coinPos is a random number, need to\n// return it back from InitState func\nconst [initState, coinPos] = getInitState(\n    Constants.BOARD_SIZE,\n    Constants.MAGE_START_POS,\n    Constants.IMG,\n    Constants.COIN\n);\n\nconst initPositions = {\n    \"mage\": Constants.MAGE_START_POS,\n    \"coin\": coinPos\n};\n\nconst initKeysPressed = {};\nObject.keys(Constants.KEY_DOWN_SET_UP).forEach(\n    key => {\n        initKeysPressed[key] = {\n            pressed : Constants.KEY_DOWN_SET_UP[key].pressed\n        };\n    }\n);\n\nconst initTimer = {\n    \"time\": 60,\n    \"timerId\": null\n};\n\n\n// each square calls this and gets updated state\nexport const squares = (state = initState, action) => {\n    switch (action.type) {\n    case \"MOVE_UP\":\n    case \"MOVE_DOWN\":\n    case \"MOVE_RIGHT\":\n    case \"MOVE_LEFT\":\n        return {\n            ...state,\n            [action.currentMagePos]: {\n                ...state[action.currentMagePos],\n                mage: null\n            },\n            [action.newMagePos]: {\n                ...state[action.newMagePos],\n                mage: action.img\n            }\n        };\n    case \"MOVE_UP_COIN_RESET\":\n    case \"MOVE_DOWN_COIN_RESET\":\n    case \"MOVE_RIGHT_COIN_RESET\":\n    case \"MOVE_LEFT_COIN_RESET\":\n        return {\n            ...state,\n            [action.currentMagePos]: {\n                ...state[action.currentMagePos],\n                mage: null\n            },\n            [action.newMagePos]: {\n                ...state[action.newMagePos],\n                mage: action.img,\n                coin: null\n            },\n            [action.newCoinPos]: {\n                ...state[action.newCoinPos],\n                coin: action.coinImg,\n                mage: null\n            }\n        };\n    case \"RESET\":\n        return initState;\n    default:\n        return state;\n    }\n};\n\nexport const coinAndMagePos = (state = initPositions, action) => {\n    switch (action.type) {\n    case \"UPDATE_BOTH\":\n        return {\n            ...state,\n            [action.coin]: action.coinPos,\n            [action.mage]: action.magePos\n        };\n    case \"UPDATE_MAGE_POS\":\n        return {\n            ...state,\n            [action.mage]: action.position\n        };\n    case \"UPDATE_COIN_POS\":\n        return {\n            ...state,\n            [action.coin]: action.position\n        };\n    case \"RESET\":\n        return initPositions;\n    default:\n        return state;\n    }\n};\n\nexport const keysPressed = (state = initKeysPressed, action) => {\n    switch (action.type) {\n    case \"BUTTON_KEY_DOWN\":\n        return {\n            ...state,\n            [action.keyId] : {\n                pressed : true\n            }\n        };\n    case \"BUTTON_KEY_UP\":\n        return {\n            ...state,\n            [action.keyId] : {\n                pressed : false\n            }\n        };\n    case \"RESET\":\n        return initKeysPressed;\n    default:\n        return state;\n    }\n};\n\nexport const timer = (state = initTimer, action) => {\n    switch (action.type) {\n    case \"DECREMENT_COUNTER\":\n        return {\n            ...state,\n            \"time\": state[\"time\"] - 1,\n            \"timerId\": action.timerId\n        };\n    case \"RESET\":\n        return initTimer;\n    default:\n        return state;\n    }\n};\n\nexport const gameOver = (state = false, action) => {\n    switch (action.type) {\n    case \"GAME_OVER\":\n        return action.isOver;\n    case \"RESET\":\n        return false;\n    default:\n        return state;\n    }\n};\n\nexport const score = (state = 0, action) => {\n    switch (action.type) {\n    case \"ADD_ONE\":\n        return state + action.value;\n    case \"RESET\":\n        return 0;\n    default:\n        return state;\n    }\n};","import { THEMES } from \"../../constants\";\n\nconst initState = { theme: THEMES.light };\n\nexport const switchMode = (state=initState, action) => {\n    switch(action.type) {\n    case \"SWITCH_TO_DARK\":\n        return {\n            ...state,\n            theme: action.theme\n        };\n    case \"SWITCH_TO_LIGHT\":\n        return {\n            ...state,\n            theme: action.theme\n        };\n    default:\n        return state;\n    }\n};","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport * as BoardReducers from \"./components/board/boardReducer\";\nimport * as GameReducers from \"./components/game/gameReducer\";\nimport * as scoreBoardReducers from \"./components/scoreBoard/scoreBoardReducer\";\nimport * as themeToggleReducer from \"./components/themeToggle/themeToggleReducer\";\n\nconst rootReducer = combineReducers({\n    squares: BoardReducers.squares,\n    coinAndMagePos: BoardReducers.coinAndMagePos,\n    gameOver: BoardReducers.gameOver,\n    score: BoardReducers.score,\n    timer: BoardReducers.timer,\n    keysPressed: BoardReducers.keysPressed,\n    scoreboard: GameReducers.scoreboard,\n    topScores: GameReducers.topScores,\n    swapScoreBoard: scoreBoardReducers.swapScoreBoard,\n    userName: scoreBoardReducers.userName,\n    themeToggle: themeToggleReducer.switchMode,\n});\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n);\n\nexport { store };","export const scoreboard = (state = [], action) => {\n    switch (action.type) {\n    case \"SET_SCOREBOARD\":\n        return action.scoreBoardRows;\n    default:\n        return state;\n    }\n};\n\n// setting init state to null to catch\n// when the board is loading, but the function to calc\n// the new record has run\n// added this handler to the checkForNewRecord func\n// and in case the board contains no records == []\nexport const topScores = (state = null, action) => {\n    switch (action.type) {\n    case \"SET_TOP_SCORES\":\n        return action.scores;\n    default:\n        return state;\n    }\n};\n\n","export const swapScoreBoard = (state = false, action) => {\n    switch (action.type) {\n    case \"SWAP_SCOREBOARD\":\n        return action.doSwap;\n    case \"RESET\":\n        return false;\n    default:\n        return state;\n    }\n};\n\nexport const userName = (state = \"\", action) => {\n    switch (action.type) {\n    case \"SET_USER_NAME\":\n        return action.userName;\n    case \"RESET\":\n        return \"\";\n    default:\n        return state;\n    }\n};","// reprenseting elements for which styles are intended\nconst styles = {\n    small: {\n        gameovergirl : {\n            width: \"34%\",\n            height: \"34%\",\n        }\n    },\n    large: {\n        gameovergirl : {\n            width: \"25%\",\n            height: \"25%\",\n        }\n    },\n};\n\nexport default styles;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./gameOver.css\";\nimport styles from \"./gameOverStyle\";\n\nconst GameOver = (props) => {\n    const dispatch = useDispatch();\n    const isNewTopTenScore = useSelector(store => store.swapScoreBoard);\n    console.log(isNewTopTenScore);\n    const theme = useSelector(store => store.themeToggle).theme;\n    const screenSize = props.screenSize;\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isReset = event.keyCode === 13\n                ? true\n                : false;\n\n            if (isReset && !isNewTopTenScore) {\n                dispatch({\n                    type: \"RESET\",\n                });\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener(\"keydown\", handleKeyDown);\n        };\n\n    }, [dispatch, isNewTopTenScore]);\n\n    return (\n        <div className={`game-board ${screenSize}`}>\n            <div className={`board lost-${screenSize}`}>\n                <img src={props.img}\n                    style={styles[`${screenSize}`].gameovergirl}\n                    alt='nothing'\n                />\n                {props.renderScore}\n            </div>\n            <button className={`resetButton-${screenSize} ${theme}`} onClick={() =>\n                dispatch({\n                    type: \"RESET\",\n                })\n            }>restart</button>\n        </div>\n    );\n};\n\nGameOver.propTypes = {\n    img : PropTypes.string,\n    renderScore : PropTypes.number,\n    screenSize: PropTypes.string\n};\n\nexport default GameOver;","export const swapScoreBoard = (isSwap) => dispatch => {\n    dispatch({\n        type: \"SWAP_SCOREBOARD\",\n        doSwap: isSwap\n    });\n};\n\nexport const setUserName = (userName) => dispatch => {\n    dispatch({\n        type: \"SET_USER_NAME\",\n        userName: userName\n    });\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport \"./score.css\";\n\nconst Score = (props) => {\n    const theme = useSelector(store => store.themeToggle).theme;\n    const screenSize = props.screenSize;\n\n    return (\n        <div className={`row ${theme}`}>\n            <div className=\"row-sub\" id={`index-${screenSize}`}>\n                {props.index}\n            </div>\n            <div className=\"row-sub\" id={`name-${screenSize}`}>\n                {props.user}\n            </div>\n            <div className=\"row-sub\" id={`score-${screenSize}`}>\n                {props.score}\n            </div>\n        </div>\n    );\n};\n\nScore.propTypes = {\n    index : PropTypes.number,\n    user : PropTypes.string,\n    score : PropTypes.number,\n    screenSize: PropTypes.string,\n};\n\nexport default Score;","import { setTopScores, setScoreboard } from \"./gameActions\";\nimport { getScoreboardRows } from \"../../api/api.js\";\nimport { getOnlyScores, getTopSortedScores } from \"./gameUtils.js\";\n\n// get the response from the api, use func to process data...\n// ...save processed data to the redux store.\nexport const getScoreBoardThunk = (partitionKey, howMany) => dispatch => {\n    getScoreboardRows(partitionKey)\n        .then(response => getTopSortedScores(response.data, howMany))\n        .then(processedData => {\n            dispatch(setScoreboard(processedData));\n            return getOnlyScores(processedData);\n\n        }).then(onlyScores => dispatch(setTopScores(onlyScores))\n        ).catch(err => alert(`Ops! Something is Wrong with the Scoreboard load:${err.message}`));\n};","import * as axios from \"axios\";\nimport {\n    SCOREBOARD_RESULTS_ENDPOINT,\n    POST_NEW_SCORE_ENDPOINT,\n    PARTITION_KEY\n} from \"../constants.js\";\n\nexport const getScoreboardRows = (partitionKey) => {\n    try {\n        return (\n            axios.get(\n                SCOREBOARD_RESULTS_ENDPOINT,\n                {\n                    params: { partitionKey: partitionKey },\n                    headers: {\"Access-Control-Allow-Origin\": \"*\"}\n                }\n            )\n        );\n\n    } catch (error) {\n        console.log(`Request was not successful. Error:${error}`);\n    }\n};\n\nexport const postNewScore = (userName, score) => {\n    try {\n        return (\n            axios.get(\n                POST_NEW_SCORE_ENDPOINT,\n                {\n                    params: {\n                        \"partitionKey\": PARTITION_KEY,\n                        \"userName\" : userName,\n                        \"score\" : score\n                    },\n                    headers: {\n                        \"Access-Control-Allow-Origin\": \"*\",\n                    }\n                }\n            )\n        );\n    } catch (error) {\n        console.log(`Request was not successful. Error:${error}`);\n    }\n};","export const setScoreboard = (scoreBoardRows) => dispatch => {\n    dispatch({\n        type: \"SET_SCOREBOARD\",\n        scoreBoardRows: scoreBoardRows\n    });\n};\n\nexport const setTopScores = (topScores) => dispatch => {\n    dispatch({\n        type: \"SET_TOP_SCORES\",\n        scores: topScores\n    });\n};\n","import { postNewScore } from \"../../api/api.js\";\nimport { swapScoreBoard } from \"../scoreBoard/scoreBoardActions.js\";\nimport { getScoreBoardThunk } from \"../game/gameThunkCreators\";\n\n// set new score in the table and re-generate scoreboard\nexport const setNewScoreThunk = (userName, score, partitionKey, howMany) => dispatch => {\n    postNewScore(userName, score)\n        .then(response => {\n            if (response.status === 200) return response;\n        }).then(() => {\n            dispatch(\n                getScoreBoardThunk(\n                    partitionKey,\n                    howMany\n                )\n            );}).then(() => {\n            dispatch(\n                swapScoreBoard(\n                    false\n                )\n            );\n        }).catch(\n            err => alert(`Ops! Something is Wrong with a new score upload:${err.message}`)\n        );\n};","import { setNewScoreThunk } from \"./nameFormThunkCreators\";\n\nexport const handleSubmit = (event, userName, whichIndex, itemAtIndex, score, dispatch) => {\n    event.preventDefault();\n\n    if (userName.trim().length === 0)\n        alert(\"You can't submit a blank form!\");\n\n    // run through regex\n    const isOnlyStandardChars = /^[a-zA-Z1-9-_*$]+$/.test(userName);\n\n    if (!isOnlyStandardChars) {\n        alert(\"You can only use a-z, A-Z, 1-9, -, _ , * ,$ characters.\");\n    } else {\n        const confirmUserName = prompt(`Submitting you score under userName: ${userName}? (yes/no)`);\n\n        if (confirmUserName === null) {\n            alert(\"You are a picky one!\\nChange your name or restart the game!\");\n\n        } else if (confirmUserName.toLowerCase() === \"yes\") {\n            alert(\"sweet!\");\n            dispatch(setNewScoreThunk(userName, score, \"sergey\", 10));\n        }\n    }\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserName } from \"../scoreBoard/scoreBoardActions.js\";\nimport { handleSubmit } from \"./nameFormUtils.js\";\nimport \"./nameForm.css\";\n\nconst NameForm = (props) => {\n    const dispatch = useDispatch();\n    const userName = useSelector(store => store.userName);\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isSubmit = event.keyCode === 13\n                ? true\n                : false;\n\n            if (isSubmit) {\n                handleSubmit(\n                    event,\n                    userName,\n                    props.whichIndex,\n                    props.itemAtIndex,\n                    props.score,\n                    dispatch\n                );\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [dispatch, props, userName]);\n\n    return (\n        <div className={`winner-${props.screenSize}`}>\n            <div className='congrats'>\n                <h1>Congrats on setting a new Record!</h1>\n            </div>\n            <form onSubmit={\n                event => handleSubmit(\n                    event,\n                    userName,\n                    props.whichIndex,\n                    props.itemAtIndex,\n                    props.score,\n                    dispatch\n                )}>\n                <label>\n                    How should we write you down in History?\n                    <br></br>\n                    <input\n                        type='text'\n                        onChange={event => dispatch(\n                            setUserName(event.target.value)\n                        )}\n                    />\n                </label>\n                <br></br>\n                <button className='submit' type='Submit'>\n                    submit\n                </button>\n            </form>\n        </div>\n    );\n};\n\nNameForm.propTypes = {\n    whichIndex : PropTypes.number,\n    itemAtIndex : PropTypes.any,\n    score : PropTypes.number,\n    screenSize: PropTypes.string\n};\n\nexport default NameForm;","import React from \"react\";\n\nexport const getRowElements = (topScores, Score, screenSize) => {\n    const rows = [];\n\n    topScores.forEach((row, index) => rows.push(\n        <Score key={index + 1}\n            index={index + 1}\n            user={row.User}\n            score={row.Score}\n            screenSize={screenSize}\n        />\n    ));\n\n    return rows;\n};\n\nconst getCountOfMinNums = (topScoresArr) => {\n    const minNum = Math.min(...topScoresArr);\n    const minNumsCount = topScoresArr.reduce(\n        (accum, currVal) => {\n            const val = currVal === minNum ? 1 : 0;\n            return accum + val;\n        }\n    );\n    return [minNum , minNumsCount];\n};\n\n/**\n * This function is used to determine if new top 10 score is achieved\n *\n * @param score - user's current score for a given game played.\n * @param topScoresArray -- an array of scores received from the back-end.\n * It contains only scores, sorted in desc order.\n * @param {*} boardLength -- a parameter that controls the size of the board\n * to be displayed.\n * @returns an array [newRecordSet, whichIndex] - [bool, integer]\n *\n */\nexport const checkForNewRecord = (score, topScoresArray, boardLength) => {\n    let newRecordSet = false;\n    let whichIndex;\n\n    // if there are > 1 min score in results, new records won't show on the board.\n    // therefore I will exclude them from the calculation.\n\n    //adding this condition to excludre run for when the board is still loading\n    if (topScoresArray === null) {\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is the first score on the board\n    if (\n        topScoresArray.length === 0\n        && score !== 0\n    ) {\n        newRecordSet = true;\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is the new highest score on the board\n    if (score >= topScoresArray[0]) {\n        newRecordSet = true;\n        whichIndex = 0;\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is not a new top score, but the board is not full yet\n    if (\n        !newRecordSet\n        && topScoresArray.length < boardLength\n        && score !== 0\n    ) {\n        newRecordSet = true;\n        return [newRecordSet, whichIndex];\n    }\n\n    if (topScoresArray.length !== 0) {\n        const [minNum, minNumsCount] = getCountOfMinNums(topScoresArray);\n        // for everything else\n        for (\n            let i = 0;\n            i < topScoresArray.length - 1;\n            i++\n        ) {\n            if (\n                score < topScoresArray[i]\n                && score >= topScoresArray[i + 1]\n                && score !== minNum\n            ) {\n                newRecordSet = true;\n                whichIndex = i + 1;\n                break;\n            }\n            else if  (\n                score === minNum\n                && minNumsCount < 1\n            ) {\n                newRecordSet = true;\n                whichIndex = i + 1;\n                break;\n            }\n        }\n    }\n\n    return [newRecordSet, whichIndex];\n};","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { swapScoreBoard } from \"./scoreBoardActions.js\";\nimport Score from \"../score/Score.js\";\nimport NameForm from \"../nameForm/NameForm\";\nimport * as ScoreBoardUtils from \"./scoreBoardUtils.js\";\nimport * as Constants from \"../../constants.js\";\nimport \"./scoreBoard.css\";\nimport PropTypes from \"prop-types\";\n\nexport const Scoreboard = (props) => {\n    const dispatch = useDispatch();\n    const score = useSelector(store => store.score);\n    const scoreBoardResults = useSelector(store => store.scoreboard);\n    const onlyScores = useSelector(store => store.topScores);\n    const doSwap = useSelector(store => store.swapScoreBoard);\n    const screenSize = props.screenSize;\n\n    React.useEffect(() => {\n        const resultArr = ScoreBoardUtils.checkForNewRecord(\n            score,\n            onlyScores,\n            Constants.scoreBoardLength\n        );\n        const newRecordSet = resultArr[0];\n\n        if (newRecordSet) {\n            dispatch(\n                swapScoreBoard(true)\n            );\n        }\n\n    }, [dispatch, score, onlyScores]);\n\n    const rowElements = ScoreBoardUtils.getRowElements(\n        scoreBoardResults,\n        Score,\n        screenSize\n    );\n\n    const resultArr = ScoreBoardUtils.checkForNewRecord(\n        score,\n        onlyScores,\n        Constants.scoreBoardLength\n    );\n    const whichIndex = resultArr[1];\n\n\n    if (doSwap) {\n        return (\n            <NameForm\n                whichIndex={whichIndex}\n                itemAtIndex={scoreBoardResults[whichIndex]}\n                score={score}\n                screenSize={screenSize}\n            />\n        );\n    } else {\n        return (\n            <div className={`table ${screenSize}`}>\n                <div className={`header-${screenSize}`}>scoreboard</div>\n                <div className='column-headers'>\n                    <div className='row-sub' id={`index-${screenSize}`}>\n                        Place\n                    </div>\n                    <div className='row-sub' id={`name-${screenSize}`}>\n                        User\n                    </div>\n                    <div className='row-sub' id={`score-${screenSize}`}>\n                        Score\n                    </div>\n                </div>\n                {rowElements}\n            </div>\n        );\n    }\n};\n\nScoreboard.propTypes = {\n    screenSize: PropTypes.string\n};\n\nexport default Scoreboard;\n","import React from \"react\";\nimport * as Constants from \"../../constants.js\";\nimport GameOver from \"../gameOver/GameOver.js\";\nimport Scoreboard from \"../scoreBoard/ScoreBoard.js\";\n\nexport const renderBoard = (\n    Board,\n    squares,\n    coinAndMagePos,\n    score,\n    timer,\n    screenSize\n) => {\n    return (\n        <div className={`game-board ${screenSize}`}>\n            <div className=\"score\"><h2>Score: {score}</h2></div>\n            <div className=\"timer\"><h2>Time: {timer}</h2></div>\n            <Board\n                class=\"board\"\n                squares={squares}\n                coinAndMagePos={coinAndMagePos}\n                img={Constants.IMG}\n                coinImg={Constants.COIN}\n                timer={timer}\n            />\n        </div>\n    );\n};\n\nexport const renderGameOverBoard = (score, screenSize) => {\n    const renderScore = renderGameOver(score, screenSize);\n    const img = Constants.GAME_OVER_IMG;\n\n    return (\n        <div className=\"game-over-screen\">\n            <GameOver\n                img={img}\n                renderScore={renderScore}\n                screenSize={screenSize}\n            />\n            <Scoreboard\n                screenSize={screenSize}\n            />\n        </div>\n    );\n};\n\nexport const renderInstructions = () => {\n    return (\n        <div className=\"instructions\">\n            <h1>Collect all the DOGE!</h1>\n            <h2>Rules:</h2>\n            <h3>1. Use keyboard arrows (← ↑ ↓ →) to move the character</h3>\n            <h3>1. Use Enter key to restart the game</h3>\n            <h3>2. If you move over the edge it is game over</h3>\n            <h3>3. Collect as many DOGE in 60 sec to fly to the moon!</h3>\n        </div>\n    );\n};\n\nconst renderGameOver = (score, screenSize) => {\n    const msg = getScoreMessage(score);\n\n    return (\n        <div className={`finalScore-${screenSize}`}>\n            <h2 className={`${screenSize}`}>\n                Your Score: {score}\n            </h2>\n            <h3 className={`${screenSize}`}>\n                {msg}\n            </h3>\n        </div>\n    );\n};\n\nconst getScoreMessage = (score) => {\n    let msg = null;\n\n    if (score >= 0) msg=\"Try harder next time!\";\n    if (score > 5) msg=\"Are you sure you are using keyboard?\";\n    if (score > 10) msg=\"Your rocket crashed back on Earth!\";\n    if (score > 20) msg=\"I can see DODG high in the sky!\";\n    if (score > 50) msg=\"You are really good at this!\";\n    if (score > 75) msg=\"TO THE MOOOON!\";\n\n    return msg;\n};\n\nexport const getOnlyScores = (scoresObj) => {\n    const onlyScores = [];\n    scoresObj.forEach(\n        row => onlyScores.push(row[\"Score\"])\n    );\n\n    return onlyScores;\n};\n\nexport const getTopSortedScores = (scoreBoardResults, howMany) => {\n    const scoreBoardArray = Object.entries(scoreBoardResults);\n\n    const scores = [];\n    scoreBoardArray.forEach(\n        row =>\n            scores.push({\n                \"User\": row[0],\n                \"Score\": parseInt(row[1][\"Score\"]),\n                \"RowKey\" : row[1][\"TimeStamp\"]\n            })\n    );\n\n    scores.sort(sortScores);\n    return scores.slice(0, howMany);\n};\n\nconst sortScores = (a, b) => {\n    const scoreA = parseInt(a[\"Score\"]);\n    const scoreB = parseInt(b[\"Score\"]);\n\n    if (scoreA > scoreB) return -1;\n    if (scoreA === scoreB) return 0;\n    if (scoreA < scoreB) return 1;\n};\n\nexport const getScreenSize = () => {\n    const screenWidth = window.innerWidth;\n    const smallScrenWidth = Constants.SMALL_SCREEN.width;\n\n    if (\n        screenWidth <= smallScrenWidth\n    ) {\n        return Constants.SCREEN_SIZES.small;\n    }\n\n    return Constants.SCREEN_SIZES.large;\n};","import React from \"react\";\n\nexport const getImage = (whichImage, image) => {\n    switch (whichImage) {\n    case \"mage\": {\n        const mage = image\n            ? <img src={image}\n                style={{ width: \"100%\", height: \"100%\" }}\n                alt='mage' />\n            : null;\n        return mage;\n    }\n    case \"coin\": {\n        const coin = image\n            ? <img src={image}\n                style={{ width: \"50%\", height: \"50%\" }}\n                alt='coin' />\n            : null;\n        return coin;\n    }\n    default:\n        return null;\n    }\n};\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getImage } from \"./squareUtils\";\nimport { useSelector } from \"react-redux\";\nimport \"./square.css\";\nimport { getScreenSize } from \"../game/gameUtils\";\n\n\nconst Square = (props) => {\n    const theme = useSelector(store => store.themeToggle).theme;\n    const screenSize = getScreenSize();\n    const squareObj = props.squareObj;\n\n    const mage = getImage(\"mage\", squareObj.mage);\n    const coin = getImage(\"coin\", squareObj.coin);\n\n    return (\n        <div\n            className={`square ${theme} ${screenSize}`}\n            id={props.id}\n            data-testid={props.dataTestId} >\n            {mage || coin}\n        </div>\n    );\n};\n\nSquare.propTypes = {\n    squareObj : PropTypes.object,\n    mage : PropTypes.string,\n    coin : PropTypes.string,\n    id : PropTypes.number,\n    dataTestId : PropTypes.number\n\n};\n\nexport default Square;","export const setKeysDown = (keyId, isKeyDown) => dispatch => {\n    const type = isKeyDown ? \"BUTTON_KEY_DOWN\" : \"BUTTON_KEY_UP\";\n    dispatch({\n        type: type,\n        keyId: keyId\n    });\n};\n\nexport const addOne = () => {\n    return {\n        type: \"ADD_ONE\",\n        value: 1\n    };\n};\n\nexport const gameOver = () => dispatch => {\n    dispatch({\n        type: \"GAME_OVER\",\n        isOver: true\n    });\n};\n\nexport const decrementTimer = (timerId) => dispatch => {\n    dispatch({\n        type: \"DECREMENT_COUNTER\",\n        timerId: timerId\n    });\n};\n\nexport const updateMageSquare = (type, curPos, newPos, img) => {\n    return {\n        type: type,\n        currentMagePos: curPos,\n        newMagePos: newPos,\n        img: img\n    };\n};\n\nexport const updateMagePos = (newPos) => {\n    return {\n        type: \"UPDATE_MAGE_POS\",\n        mage: \"mage\",\n        position: newPos\n    };\n};\n\nexport const updateCoinSquare = (\n    type,\n    curMagePos,\n    newMagePos,\n    newCoinPos,\n    img,\n    coinImg\n) => {\n    return {\n        type: `${type}_COIN_RESET`,\n        currentMagePos: curMagePos,\n        newMagePos: newMagePos,\n        newCoinPos: newCoinPos,\n        img: img,\n        coinImg: coinImg\n    };\n};\n\nexport const updateCoinMagePos = (newMagePos, newCoinPos) => {\n    return {\n        type: \"UPDATE_BOTH\",\n        mage: \"mage\",\n        magePos: newMagePos,\n        coin: \"coin\",\n        coinPos: newCoinPos\n    };\n};","import * as Actions from \"./boardActions.js\";\nimport * as Utils from \"./boardUtils.js\";\nimport * as Constants from \"../../constants.js\";\n\nexport const startDecrementCounter = (timer, dispatch) => {\n    timer--;\n    dispatch(\n        Actions.decrementTimer()\n    );\n\n    let timerId = setTimeout(function tick() {\n        if (timer === 0) {\n            dispatch(\n                Actions.gameOver()\n            );\n        } else {\n            timer--;\n            timerId = setTimeout(tick, 1000);\n            dispatch(\n                Actions.decrementTimer(timerId)\n            );\n        }\n    }, 1000);\n};\n\nexport const makeMove = (coinAndMagePos, img, coinImg, obj, dispatch, timer) => {\n    if (timer === 60) startDecrementCounter(timer, dispatch); // start time ticks on first move\n\n    // do a check to see if we have gone over the boarder first\n    const currentMagePos = coinAndMagePos.mage;\n    const posChange = obj[\"posChange\"];\n    const type = obj[\"type\"];\n\n    const newMagePos = currentMagePos - posChange;\n    const isScored = Utils.hasScored(coinAndMagePos, posChange);\n\n\n    const isGameOver = Utils.isOutOfRange(currentMagePos, posChange);\n    if (isGameOver) {\n        dispatch(\n            Actions.gameOver()\n        );\n    } else if (isScored) {\n        const newCoinPos = Utils.generateCoinPos(newMagePos, Constants.BOARD_SIZE);\n        dispatch(\n            updateStateWhenScored(\n                type,\n                currentMagePos,\n                newMagePos,\n                newCoinPos,\n                img,\n                coinImg\n            )\n        );\n    } else {\n        dispatch(\n            updateStateWhenMove(\n                type,\n                currentMagePos,\n                newMagePos,\n                img\n            )\n        );\n    }\n};\n\nconst updateStateWhenMove = (\n    type,\n    curMagePos,\n    newMagePos,\n    img,\n) => dispatch => {\n    dispatch(\n        Actions.updateMageSquare(\n            type,\n            curMagePos,\n            newMagePos,\n            img,\n        )\n    );\n    dispatch(\n        Actions.updateMagePos(newMagePos)\n    );\n};\n\nconst updateStateWhenScored = (\n    type,\n    curMagePos,\n    newMagePos,\n    newCoinPos,\n    img,\n    coinImg,\n) => dispatch => {\n    dispatch(\n        Actions.updateCoinSquare(\n            type,\n            curMagePos,\n            newMagePos,\n            newCoinPos,\n            img,\n            coinImg\n        )\n    );\n    dispatch(\n        Actions.updateCoinMagePos(\n            newMagePos,\n            newCoinPos\n        )\n    );\n    dispatch(\n        Actions.addOne()\n    );\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Constants from \"../../constants.js\";\nimport Square from \"../square/Square.js\";\nimport { checkForKeys, generateBoard } from \"./boardUtils.js\";\nimport { makeMove } from \"./boardActionCreators.js\";\nimport { setKeysDown } from \"./boardActions.js\";\n\n\nconst passProps = (props, keyDowns, dispatch) => {\n    return (event) => {\n        // only accept single keyDown as a move made.\n        const isMoveMade = checkForKeys(keyDowns);\n\n        const keysFromSetUp = Constants.KEY_DOWN_SET_UP;\n        const isInCodes = Object.keys(keysFromSetUp).includes(`${event.keyCode}`)\n            ? true\n            : false;\n\n        if (isMoveMade && isInCodes) {\n            const keyObj = Constants.KEY_DOWN_SET_UP[`${event.keyCode}`];\n            makeMove(\n                props.coinAndMagePos,\n                props.img,\n                props.coinImg,\n                keyObj,\n                dispatch,\n                props.timer\n            );\n        }\n    };\n};\n\nconst Board = (props) => {\n    // adding here since this components unmounts if we lose the game\n    const dispatch = useDispatch();\n    const keyDowns = useSelector(store => store.keysPressed);\n\n    React.useEffect(() => {\n        const handleKeyDown = (e) => {\n            dispatch(\n                setKeysDown(\n                    e.keyCode,\n                    true\n                )\n            );\n        };\n\n        const handleKeyUp = (e) => {\n            dispatch(\n                setKeysDown(\n                    e.keyCode,\n                    false\n                )\n            );\n        };\n\n        const registerMove = passProps(props, keyDowns, dispatch);\n\n\n\n        window.addEventListener(\"keydown\", handleKeyDown);\n        window.addEventListener(\"keyup\", handleKeyUp);\n        window.addEventListener(\"keyup\", registerMove);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"keyup\", registerMove);\n            window.removeEventListener(\"keyup\", handleKeyUp);\n        };\n\n    }, [dispatch, props, keyDowns]);\n\n\n    const board = generateBoard(\n        props.squares,\n        Square,\n        Constants.BOARD_SIZE\n    );\n\n    return (\n        <div className={props.class}>\n            {board}\n        </div>\n    );\n};\n\nBoard.propTypes = {\n    coinAndMagePos : PropTypes.object,\n    img : PropTypes.string,\n    coinImg : PropTypes.string,\n    timer : PropTypes.number,\n    squares : PropTypes.object,\n    class : PropTypes.string,\n};\n\nexport default Board;","// export generic object with keys\n// reprenseting elements for which styles are intended\nconst styles = {\n    button: {\n        \"className\": \"theme-toggle\",\n        \"title\": \"Toggle light and dark\",\n        \"aria-label\": \"auto\",\n        \"aria-live\": \"polite\"\n    },\n    svg: {\n        \"className\": \"sun-and-moon\",\n        \"aria-hidden\": \"true\",\n        \"viewBox\": \"0 0 24 24\",\n        \"height\": 30,\n        \"width\": 24,\n    },\n    circleSun: {\n        \"className\": \"sun\",\n        \"cx\": 12,\n        \"cy\": 12,\n        \"r\": 6,\n        \"mask\": \"url(#moon-mask)\",\n        \"fill\": \"#09194a\",\n    },\n    circleMoon: {\n        \"cx\": 17,\n        \"cy\": 11,\n        \"r\": 6,\n        \"fill\": \"#09194a\",\n        \"moonoverlay\": \"aliceblue\"\n    },\n};\n\nexport default styles;","import React from \"react\";\nimport \"./themeToggle.css\";\nimport styles from \"./themeToggleStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { THEMES } from \"../../constants\";\nimport { updateBodyThemeClass } from \"./themeToggleUtils\";\n\nconst ThemeToggle = () => {\n    const dispatch = useDispatch();\n    const theme = useSelector(store => store.themeToggle).theme;\n    const switchTo = theme === THEMES.light\n        ? THEMES.dark\n        : THEMES.light;\n\n    const isLight = theme === THEMES.light;\n\n    React.useEffect(() => {\n        updateBodyThemeClass(theme, switchTo);\n    },[theme]);\n\n    return(\n        <button\n            {...styles.button}\n            onClick={() =>\n                dispatch({\n                    type: `SWITCH_TO_${switchTo.toUpperCase()}`,\n                    theme: switchTo\n                })}\n        >\n            {isLight && (\n                <svg\n                    {...styles.svg}\n                >\n                    <circle\n                        {...styles.circleSun}\n                        fill={styles.circleSun.fill}\n                        data-testid=\"circleSun\"\n                    />\n                    <g className=\"sun-beams\" stroke={styles.circleSun.fill}>\n                        <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\n                        <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\n                        <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\n                        <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\n                        <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\n                        <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\n                        <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\n                        <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\n                    </g>\n                </svg>)}\n            {!isLight && (\n                <svg\n                    {...styles.svg}\n                >\n                    <circle\n                        {...styles.circleSun}\n                        fill={styles.circleMoon.moonoverlay}\n                        data-testid=\"circleSun\"\n                    />\n                    <circle \n                        {...styles.circleMoon}\n                        data-testid=\"circleMoon\"\n                    />\n                </svg>\n            )}\n        </button>\n    );\n};\n\nexport default ThemeToggle;","export const updateBodyThemeClass = (theme, switchTo) => {\n    const baseClassName = \"body-theme\";\n    document.body.classList.remove(`${baseClassName}-${switchTo}`);\n    document.body.classList.add(`${baseClassName}-${theme}`);\n};","import { makeMove } from \"../board/boardActionCreators\";\nimport { KEY_DOWN_SET_UP } from \"../../constants\";\n\nexport const callMakeMove = (props, keyDownCode, dispatch) => {\n    const keyObj = KEY_DOWN_SET_UP[`${keyDownCode}`];\n    makeMove(\n        props.coinAndMagePos,\n        props.img,\n        props.coinImg,\n        keyObj,\n        dispatch,\n        props.timer\n    );\n};","import React from \"react\";\nimport \"./mobileControls.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { callMakeMove } from \"./mobileControlsUtils\";\n\nconst MobileControls = (props) => {\n    const theme = useSelector(store => store.themeToggle).theme;\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"button-container\" >\n            <button\n                className={`button ${theme}`}\n                id=\"button-left\"\n                onClick={() =>\n                    callMakeMove(props, \"37\", dispatch)\n                }\n            >\n                &larr;\n            </button>\n            <button\n                className={`button ${theme}`}\n                id=\"button-up\"\n                onClick={() =>\n                    callMakeMove(props, \"40\", dispatch)\n                }\n            >\n                &darr;\n            </button>\n            <button\n                className={`button ${theme}`}\n                id=\"button-down\"\n                onClick={() =>\n                    callMakeMove(props, \"38\", dispatch)\n                }\n            >\n                &uarr;\n            </button>\n            <button\n                className={`button ${theme}`}\n                id=\"button-right\"\n                onClick={() =>\n                    callMakeMove(props, \"39\", dispatch)\n                }\n            >\n                &rarr;\n            </button>\n        </div>\n    );\n};\n\nexport default MobileControls;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"../../index.css\";\nimport \"./game.css\";\nimport * as Utils from \"./gameUtils.js\";\nimport * as Constants from \"../../constants.js\";\nimport { getScoreBoardThunk } from \"./gameThunkCreators.js\";\nimport Board from \"../board/Board.js\";\nimport ThemeToggle from \"../themeToggle/ThemeToggle\";\nimport MobileControls from \"../mobileControls/MobileControls\";\n\n\nconst Game = () => {\n    const score = useSelector(store => store.score);\n    const isGameOver = useSelector(store => store.gameOver);\n    const squares = useSelector(store => store.squares);\n    const coinAndMagePos = useSelector(store => store.coinAndMagePos);\n    const timer = useSelector(store => store.timer.time);\n    const timerId = useSelector(store => store.timer.timerId);\n    const doSwap = useSelector(store => store.doSwap);\n    const [screenSize, setWindowSize] = React.useState(Utils.getScreenSize());\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handleWindowResize = () => {\n            setWindowSize((Utils.getScreenSize()));\n        };\n        // get top scores, sort then, and save in store\n        // doSwap is set if a new score record is achieved\n        // it is reset to false when a record has successfully commited\n        // to store. In this case, we need results re-render.\n        if(!doSwap)\n            dispatch(\n                getScoreBoardThunk(\n                    Constants.PARTITION_KEY,\n                    Constants.scoreBoardLength\n                )\n            );\n\n        window.addEventListener(\"resize\", handleWindowResize);\n        return () => {\n            window.removeEventListener(\"resize\", handleWindowResize);\n        };\n    },[dispatch, doSwap]);\n\n    const isSmall = screenSize === Constants.SCREEN_SIZES.small;\n\n    if (isGameOver) {\n        clearTimeout(timerId);\n    }\n\n    return (\n        <div className=\"game\">\n            <ThemeToggle />\n            {!isGameOver && (\n                Utils.renderBoard(\n                    Board,\n                    squares,\n                    coinAndMagePos,\n                    score,\n                    timer,\n                    screenSize\n                )\n            )}\n            {isGameOver && (\n                Utils.renderGameOverBoard(\n                    score,\n                    screenSize\n                )\n            )}\n            {isSmall && !isGameOver && (\n                <MobileControls\n                    squares={squares}\n                    coinAndMagePos={coinAndMagePos}\n                    img={Constants.IMG}\n                    coinImg={Constants.COIN}\n                    timer={timer}\n                />\n            )}\n            {!isGameOver && (Utils.renderInstructions())}\n        </div>\n    );\n};\n\nexport default Game;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { store } from \"./store.js\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport Game from \"./components/game/Game\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Game />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}