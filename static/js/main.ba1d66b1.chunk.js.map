{"version":3,"sources":["constants.js","utils/boardUtils.js","store/reducers/boardReducer.js","store.js","store/reducers/gameReducer.js","store/reducers/scoreBoardReducer.js","components/GameOver.js","actions/scoreBoardActions.js","components/Score.js","store/thunkCreators/gameThunkCreators.js","api/api.js","actions/gameActions.js","store/thunkCreators/nameFormThunkCreators.js","utils/nameFormUtils.js","components/NameForm.js","utils/scoreBoardUtils.js","components/ScoreBoard.js","utils/gameUtils.js","utils/squareUtils.js","components/Square.js","actions/boardActions.js","actionCreators/boardActionCreators.js","components/Board.js","components/Game.js","index.js"],"names":["IMG","process","COIN","console","log","PARTITION_KEY","KEY_DOWN_SET_UP","type","posChange","pressed","OUT_OF_RANGE_SETUP","generateCoinPos","magePos","size","boardSize","Math","pow","coinPos","floor","random","startingPos","mage","coin","Array","fill","reduce","obj","item","index","squareObj","value","id","getInitState","Constants","initState","initPositions","initKeysPressed","Object","keys","forEach","key","initTimer","rootReducer","combineReducers","squares","state","action","currentMagePos","newMagePos","img","newCoinPos","coinImg","coinAndMagePos","position","gameOver","isOver","score","timer","timerId","keysPressed","keyId","scoreboard","scoreBoardRows","topScores","scores","swapScoreBoard","doSwap","userName","store","createStore","applyMiddleware","thunkMiddleware","GameOver","props","dispatch","useDispatch","isNewTopTenScore","useSelector","React","useEffect","handleKeyDown","event","keyCode","window","addEventListener","removeEventListener","className","src","style","width","height","alt","renderScore","onClick","isSwap","Score","user","getScoreBoardThunk","partitionKey","howMany","axios","params","headers","error","getScoreboardRows","then","response","getTopSortedScores","data","processedData","getOnlyScores","onlyScores","catch","err","alert","message","setNewScoreThunk","postNewScore","status","handleSubmit","whichIndex","itemAtIndex","preventDefault","trim","length","test","confirmUserName","prompt","toLowerCase","NameForm","onSubmit","onChange","setUserName","target","checkForNewRecord","topScoresArray","boardLength","newRecordSet","topScoresArr","minNum","min","minNumsCount","accum","currVal","getCountOfMinNums","i","Scoreboard","scoreBoardResults","ScoreBoardUtils","rowElements","rows","row","push","User","renderGameOver","msg","getScoreMessage","scoresObj","scoreBoardArray","entries","parseInt","sort","sortScores","slice","a","b","scoreA","scoreB","getImage","whichImage","image","Square","setKeysDown","isKeyDown","decrementTimer","makeMove","Actions","setTimeout","tick","startDecrementCounter","isScored","Utils","isGameOver","includes","updateStateWhenScored","updateStateWhenMove","curMagePos","curPos","newPos","Board","keyDowns","e","handleKeyUp","registerMove","isMoveMade","keysState","checkForKeys","keysFromSetUp","isInCodes","keyObj","board","squaresObj","rowLength","rowEndIndex","j","generateBoard","class","Game","time","render","renderInstructions","clearTimeout","ReactDOM","document","getElementById"],"mappings":"4MAEaA,EACPC,WAGOC,EACPD,WAGNE,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,cACZE,QAAQC,IAAIH,oiBACL,IAGMI,EAAgBJ,SAqBhBK,EAAkB,CAC3B,GAAM,CACFC,KAAM,YACNC,UAAW,EACXC,SAAS,GAEb,GAAM,CACFF,KAAM,UACNC,UAAW,EACXC,SAAS,GAEb,GAAM,CACFF,KAAM,aACNC,WAAY,EACZC,SAAS,GAEb,GAAM,CACFF,KAAM,YACNC,WAAY,EACZC,SAAS,IAMJC,EAAqB,CAC9B,EAAK,CAAC,EAAG,EAAG,GAAI,GAAI,IACpB,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAClB,KAAM,CAAC,EAAG,EAAG,GAAI,GAAI,IACrB,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,K,OC4BdC,EAAkB,SAAlBA,EAAmBC,EAASC,GACrC,IAAMC,EAAYC,KAAKC,IAAIH,EAAM,GAC3BI,EAAUF,KAAKG,MAAMH,KAAKI,SAAWL,GAE3C,OAAIG,IAAYL,EACMD,EAAgBC,EAASC,GAIpCI,GClGf,EDW4B,SAACJ,EAAMO,EAAaC,EAAMC,GAClD,IAAML,EAAUN,EAAgBS,EAAaP,GACvCC,EAAYC,KAAKC,IAAIH,EAAM,GA4BjC,MAAO,CAzBWU,MAAMT,GAAWU,KAAK,MAAMC,QAC1C,SAACC,EAAKC,EAAMC,GAER,IAQMC,EAAY,CACdC,MAAO,KACPC,GAAIH,EACJP,KAXYD,IAAgBQ,EAC1BP,EACA,KAUFC,KARYL,IAAYW,EACtBN,EACA,MASN,OAAO,2BACAI,GADP,kBAEKE,EAAQC,MAtBL,IA2BGZ,GCzCMe,CFLH,EACI,GEO1BC,EACAA,GAJJ,mBAAOC,EAAP,KAOMC,EAAgB,CAClB,KFZ0B,GEa1B,KATJ,MAYMC,EAAkB,GACxBC,OAAOC,KAAKL,GAA2BM,SACnC,SAAAC,GACIJ,EAAgBI,GAAO,CACnB/B,QAAUwB,EAA0BO,GAAK/B,YAKrD,IAAMgC,EAAY,CACd,KAAQ,GACR,QAAW,MCtBTC,EAAcC,YAAgB,CAChCC,QD0BmB,WAAgC,IAAD,IAA9BC,EAA8B,uDAAtBX,EAAWY,EAAW,uCAClD,OAAQA,EAAOvC,MACf,IAAK,UACL,IAAK,YACL,IAAK,aACL,IAAK,YACD,OAAO,2BACAsC,GADP,uBAEKC,EAAOC,eAFZ,2BAGWF,EAAMC,EAAOC,iBAHxB,IAIQ1B,KAAM,QAJd,cAMKyB,EAAOE,WANZ,2BAOWH,EAAMC,EAAOE,aAPxB,IAQQ3B,KAAMyB,EAAOG,OARrB,IAWJ,IAAK,qBACL,IAAK,uBACL,IAAK,wBACL,IAAK,uBACD,OAAO,2BACAJ,GADP,uBAEKC,EAAOC,eAFZ,2BAGWF,EAAMC,EAAOC,iBAHxB,IAIQ1B,KAAM,QAJd,cAMKyB,EAAOE,WANZ,2BAOWH,EAAMC,EAAOE,aAPxB,IAQQ3B,KAAMyB,EAAOG,IACb3B,KAAM,QATd,cAWKwB,EAAOI,WAXZ,2BAYWL,EAAMC,EAAOI,aAZxB,IAaQ5B,KAAMwB,EAAOK,QACb9B,KAAM,QAdd,IAiBJ,IAAK,QACD,OAAOa,EACX,QACI,OAAOW,IClEXO,eDsE0B,WAAoC,IAAD,EAAlCP,EAAkC,uDAA1BV,EAAeW,EAAW,uCAC7D,OAAQA,EAAOvC,MACf,IAAK,cACD,OAAO,2BACAsC,GADP,uBAEKC,EAAOxB,KAAOwB,EAAO7B,SAF1B,cAGK6B,EAAOzB,KAAOyB,EAAOlC,SAH1B,IAKJ,IAAK,kBACD,OAAO,2BACAiC,GADP,kBAEKC,EAAOzB,KAAOyB,EAAOO,WAE9B,IAAK,kBACD,OAAO,2BACAR,GADP,kBAEKC,EAAOxB,KAAOwB,EAAOO,WAE9B,IAAK,QACD,OAAOlB,EACX,QACI,OAAOU,IC1FXS,SDoIoB,WAA4B,IAA3BT,EAA0B,wDAAXC,EAAW,uCAC/C,OAAQA,EAAOvC,MACf,IAAK,YACD,OAAOuC,EAAOS,OAClB,IAAK,QACD,OAAO,EACX,QACI,OAAOV,IC1IXW,MD8IiB,WAAwB,IAAvBX,EAAsB,uDAAd,EAAGC,EAAW,uCACxC,OAAQA,EAAOvC,MACf,IAAK,UACD,OAAOsC,EAAQC,EAAOhB,MAC1B,IAAK,QACD,OAAO,EACX,QACI,OAAOe,ICpJXY,MDmHiB,WAAgC,IAA/BZ,EAA8B,uDAAtBJ,EAAWK,EAAW,uCAChD,OAAQA,EAAOvC,MACf,IAAK,oBACD,OAAO,2BACAsC,GADP,IAEI,KAAQA,EAAK,KAAW,EACxB,QAAWC,EAAOY,UAE1B,IAAK,QACD,OAAOjB,EACX,QACI,OAAOI,IC7HXc,YD2FuB,WAAsC,IAArCd,EAAoC,uDAA5BT,EAAiBU,EAAW,uCAC5D,OAAQA,EAAOvC,MACf,IAAK,kBACD,OAAO,2BACAsC,GADP,kBAEKC,EAAOc,MAAS,CACbnD,SAAU,KAGtB,IAAK,gBACD,OAAO,2BACAoC,GADP,kBAEKC,EAAOc,MAAS,CACbnD,SAAU,KAGtB,IAAK,QACD,OAAO2B,EACX,QACI,OAAOS,IC7GXgB,WCbsB,WAAyB,IAAxBhB,EAAuB,uDAAf,GAAIC,EAAW,uCAC9C,MACK,mBADGA,EAAOvC,KAEJuC,EAAOgB,eAEPjB,GDSXkB,UCAqB,WAA2B,IAA1BlB,EAAyB,uDAAjB,KAAMC,EAAW,uCAC/C,MACK,mBADGA,EAAOvC,KAEJuC,EAAOkB,OAEPnB,GDJXoB,eEf0B,WAA4B,IAA3BpB,EAA0B,wDAAXC,EAAW,uCACrD,OAAQA,EAAOvC,MACf,IAAK,kBACD,OAAOuC,EAAOoB,OAClB,IAAK,QACD,OAAO,EACX,QACI,OAAOrB,IFSXsB,SELoB,WAAyB,IAAxBtB,EAAuB,uDAAf,GAAIC,EAAW,uCAC5C,OAAQA,EAAOvC,MACf,IAAK,gBACD,OAAOuC,EAAOqB,SAClB,IAAK,QACD,MAAO,GACX,QACI,OAAOtB,MFCTuB,EAAQC,YACV3B,EACA4B,YAAgBC,M,OG+BLC,G,MAhDE,SAACC,GACd,IAAMC,EAAWC,cACXC,EAAmBC,aAAY,SAAAT,GAAK,OAAIA,EAAMH,kBAuBpD,OArBAa,IAAMC,WAAU,WACZ,IAAMC,EAAgB,SAACC,GACe,KAAlBA,EAAMC,UAINN,GACZF,EAAS,CACLnE,KAAM,WAMlB,OAFA4E,OAAOC,iBAAiB,UAAWJ,GAE5B,WAEHG,OAAOE,oBAAoB,UAAWL,MAG3C,CAACN,EAAUE,IAGV,sBAAKU,UAAU,aAAf,UACI,sBAAKA,UAAU,aAAf,UACI,qBAAKC,IAAKd,EAAMxB,IACZuC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,OAC/BC,IAAI,YAEPlB,EAAMmB,eAEX,wBAAQN,UAAU,cAAcO,QAAS,kBACrCnB,EAAS,CACLnE,KAAM,WAFd,0BCtCC0D,EAAiB,SAAC6B,GAAD,OAAY,SAAApB,GACtCA,EAAS,CACLnE,KAAM,kBACN2D,OAAQ4B,MCsBDC,EAtBD,SAACtB,GACX,OACI,sBAAKa,UAAU,MAAf,UACI,qBAAKA,UAAU,UAAUvD,GAAG,QAA5B,SACK0C,EAAM7C,QAEX,qBAAK0D,UAAU,UAAUvD,GAAG,OAA5B,SACK0C,EAAMuB,OAEX,qBAAKV,UAAU,UAAUvD,GAAG,QAA5B,SACK0C,EAAMjB,Y,QCPVyC,EAAqB,SAACC,EAAcC,GAAf,OAA2B,SAAAzB,ICC5B,SAACwB,GAC9B,IACI,OACIE,MVI+BnG,uEUF3B,CACIoG,OAAQ,CAAEH,aAAcA,GACxBI,QAAS,CAAC,8BAA+B,OAKvD,MAAOC,GACLpG,QAAQC,IAAR,4CAAiDmG,MDbrDC,CAAkBN,GACbO,MAAK,SAAAC,GAAQ,OAAIC,EAAmBD,EAASE,KAAMT,MACnDM,MAAK,SAAAI,GETe,IAAC/C,EFWlB,OADAY,GEVkBZ,EFUK+C,EEVc,SAAAnC,GAC7CA,EAAS,CACLnE,KAAM,iBACNuD,eAAgBA,OFQLgD,EAAcD,MAEtBJ,MAAK,SAAAM,GAAU,OAAIrC,GENDX,EFMuBgD,EENT,SAAArC,GACvCA,EAAS,CACLnE,KAAM,iBACNyD,OAAQD,OAHY,IAACA,KFOnBiD,OAAM,SAAAC,GAAG,OAAIC,MAAM,oDAAD,OAAqDD,EAAIE,eGTxEC,EAAmB,SAACjD,EAAUX,EAAO0C,EAAcC,GAAhC,OAA4C,SAAAzB,IFmBhD,SAACP,EAAUX,GACnC,IACI,OACI4C,MVZ2BnG,iEUcvB,CACIoG,OAAQ,CACJ,aAAgBhG,EAChB,SAAa8D,EACb,MAAUX,GAEd8C,QAAS,CACL,8BAA+B,OAKjD,MAAOC,GACLpG,QAAQC,IAAR,4CAAiDmG,MEpCrDc,CAAalD,EAAUX,GAClBiD,MAAK,SAAAC,GACF,GAAwB,MAApBA,EAASY,OAAgB,OAAOZ,KACrCD,MAAK,WACJ/B,EACIuB,EACIC,EACAC,OAEHM,MAAK,WACV/B,EACIT,GACI,OAGT+C,OACC,SAAAC,GAAG,OAAIC,MAAM,mDAAD,OAAoDD,EAAIE,eCpBnEI,EAAe,SAACtC,EAAOd,EAAUqD,EAAYC,EAAajE,EAAOkB,GAS1E,GARAO,EAAMyC,iBAEyB,IAA3BvD,EAASwD,OAAOC,QAChBV,MAAM,kCAGkB,qBAAqBW,KAAK1D,GAI/C,CACH,IAAM2D,EAAkBC,OAAO,wCAAD,OAAyC5D,EAAzC,eAEN,OAApB2D,EACAZ,MAAM,+DAEmC,QAAlCY,EAAgBE,gBACvBd,MAAM,UACNxC,EAAS0C,EAAiBjD,EAAUX,EAAO,SAAU,WATzD0D,MAAM,4DC8DCe,EApEE,SAACxD,GACd,IAAMC,EAAWC,cACXR,EAAWU,aAAY,SAAAT,GAAK,OAAIA,EAAMD,YA2B5C,OAzBAW,IAAMC,WAAU,WACZ,IAAMC,EAAgB,SAACC,GACgB,KAAlBA,EAAMC,SAKnBqC,EACItC,EACAd,EACAM,EAAM+C,WACN/C,EAAMgD,YACNhD,EAAMjB,MACNkB,IAMZ,OAFAS,OAAOC,iBAAiB,UAAWJ,GAE5B,WAEHG,OAAOE,oBAAoB,UAAWL,MAE3C,CAACN,EAAUD,EAAON,IAGjB,sBAAKmB,UAAU,SAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qEAEJ,uBAAM4C,SACF,SAAAjD,GAAK,OAAIsC,EACLtC,EACAd,EACAM,EAAM+C,WACN/C,EAAMgD,YACNhD,EAAMjB,MACNkB,IAPR,UASI,6EAEI,uBACA,uBACInE,KAAK,OACL4H,SAAU,SAAAlD,GAAK,OAAIP,EP/ChB,SAACP,GAAD,OAAc,SAAAO,GACrCA,EAAS,CACLnE,KAAM,gBACN4D,SAAUA,KO6CUiE,CAAYnD,EAAMoD,OAAOvG,cAIrC,uBACA,wBAAQwD,UAAU,SAAS/E,KAAK,SAAhC,2B,QCtBH+H,EAAoB,SAAC9E,EAAO+E,EAAgBC,GACrD,IACIhB,EADAiB,GAAe,EAOnB,GAAuB,OAAnBF,EACA,MAAO,CAACE,EAAcjB,GAI1B,GAC8B,IAA1Be,EAAeX,QACF,IAAVpE,EAGH,MAAO,CADPiF,GAAe,EACOjB,GAI1B,GAAIhE,GAAS+E,EAAe,GAGxB,MAAO,CAFPE,GAAe,EACfjB,EAAa,GAKjB,IACKiB,GACEF,EAAeX,OAASY,GACd,IAAVhF,EAGH,MAAO,CADPiF,GAAe,EACOjB,GAG1B,GAA8B,IAA1Be,EAAeX,OAGf,IAFA,MA7DkB,SAACc,GACvB,IAAMC,EAAS5H,KAAK6H,IAAL,MAAA7H,KAAI,YAAQ2H,IACrBG,EAAeH,EAAajH,QAC9B,SAACqH,EAAOC,GAEJ,OAAOD,GADKC,IAAYJ,EAAS,EAAI,MAI7C,MAAO,CAACA,EAASE,GAqDkBG,CAAkBT,GAAjD,mBAAOI,EAAP,KAAeE,EAAf,KAGQI,EAAI,EACRA,EAAIV,EAAeX,OAAS,EAC5BqB,IACF,CACE,GACIzF,EAAQ+E,EAAeU,IACpBzF,GAAS+E,EAAeU,EAAI,IAC5BzF,IAAUmF,EACf,CACEF,GAAe,EACfjB,EAAayB,EAAI,EACjB,MAEC,GACDzF,IAAUmF,GACPE,EAAe,EACpB,CACEJ,GAAe,EACfjB,EAAayB,EAAI,EACjB,OAKZ,MAAO,CAACR,EAAcjB,IC/BX0B,EAjEW,WACtB,IAAMxE,EAAWC,cACXnB,EAAQqB,aAAY,SAAAT,GAAK,OAAIA,EAAMZ,SACnC2F,EAAoBtE,aAAY,SAAAT,GAAK,OAAIA,EAAMP,cAC/CkD,EAAalC,aAAY,SAAAT,GAAK,OAAIA,EAAML,aACxCG,EAASW,aAAY,SAAAT,GAAK,OAAIA,EAAMH,kBAE1Ca,IAAMC,WAAU,WACMqE,EACd5F,EACAuD,EhBmDoB,IgBhDO,IAG3BrC,EACIT,GAAe,MAIxB,CAACS,EAAUlB,EAAOuD,IAErB,IAAMsC,ED7BoB,SAACtF,EAAWgC,GACtC,IAAMuD,EAAO,GAUb,OARAvF,EAAUxB,SAAQ,SAACgH,EAAK3H,GAAN,OAAgB0H,EAAKE,KACnC,cAACzD,EAAD,CACInE,MAAOA,EAAQ,EACfoE,KAAMuD,EAAIE,KACVjG,MAAO+F,EAAIxD,OAHHnE,EAAQ,OAOjB0H,ECkBaF,CAChBD,EACApD,GAQEyB,EALY4B,EACd5F,EACAuD,EhB+BwB,IgB5BC,GAG7B,OAAI7C,EAEI,cAAC,EAAD,CACIsD,WAAYA,EACZC,YAAa0B,EAAkB3B,GAC/BhE,MAAOA,IAKX,sBAAK8B,UAAU,QAAf,UACI,qBAAKA,UAAU,SAAf,wBACA,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,UAAUvD,GAAG,QAA5B,mBAGA,qBAAKuD,UAAU,UAAUvD,GAAG,OAA5B,kBAGA,qBAAKuD,UAAU,UAAUvD,GAAG,QAA5B,sBAIHsH,MCVXK,EAAiB,SAAClG,GACpB,IAAMmG,EAAMC,EAAgBpG,GAE5B,OACI,sBAAK8B,UAAU,aAAf,UACI,8CAAiB9B,KACjB,6BAAKmG,QAKXC,EAAkB,SAACpG,GACrB,IAAImG,EAAM,KASV,OAPInG,GAAS,IAAGmG,EAAI,yBAChBnG,EAAQ,IAAGmG,EAAI,wCACfnG,EAAQ,KAAImG,EAAI,sCAChBnG,EAAQ,KAAImG,EAAI,mCAChBnG,EAAQ,KAAImG,EAAI,gCAChBnG,EAAQ,KAAImG,EAAI,kBAEbA,GAGE7C,EAAgB,SAAC+C,GAC1B,IAAM9C,EAAa,GAKnB,OAJA8C,EAAUtH,SACN,SAAAgH,GAAG,OAAIxC,EAAWyC,KAAKD,EAAG,UAGvBxC,GAGEJ,EAAqB,SAACwC,EAAmBhD,GAClD,IAAM2D,EAAkBzH,OAAO0H,QAAQZ,GAEjCnF,EAAS,GAWf,OAVA8F,EAAgBvH,SACZ,SAAAgH,GAAG,OACCvF,EAAOwF,KAAK,CACR,KAAQD,EAAI,GACZ,MAASS,SAAST,EAAI,GAAJ,OAClB,OAAWA,EAAI,GAAJ,eAIvBvF,EAAOiG,KAAKC,GACLlG,EAAOmG,MAAM,EAAGhE,IAGrB+D,EAAa,SAACE,EAAGC,GACnB,IAAMC,EAASN,SAASI,EAAC,OACnBG,EAASP,SAASK,EAAC,OAEzB,OAAIC,EAASC,GAAgB,EACzBD,IAAWC,EAAe,EAC1BD,EAASC,EAAe,OAA5B,GC/GSC,EAAW,SAACC,EAAYC,GACjC,OAAQD,GACR,IAAK,OAMD,OALaC,EACP,qBAAKnF,IAAKmF,EACRlF,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,IAAI,SACN,KAGV,IAAK,OAMD,OALa+E,EACP,qBAAKnF,IAAKmF,EACRlF,MAAO,CAAEC,MAAO,MAAOC,OAAQ,OAC/BC,IAAI,SACN,KAGV,QACI,OAAO,OCGAgF,EApBA,SAAClG,GACZ,IAAM5C,EAAY4C,EAAM5C,UAElBR,EAAOmJ,EAAS,OAAQ3I,EAAUR,MAClCC,EAAOkJ,EAAS,OAAQ3I,EAAUP,MAExC,OACI,qBAAKgE,UAAU,SAASvD,GAAI0C,EAAM1C,GAAlC,SACKV,GAAQC,KCZRsJ,EAAc,SAAChH,EAAOiH,GAAR,OAAsB,SAAAnG,GAE7CA,EAAS,CACLnE,KAFSsK,EAAY,kBAAoB,gBAGzCjH,MAAOA,MAkBFkH,EAAiB,SAACpH,GAAD,OAAa,SAAAgB,GACvCA,EAAS,CACLnE,KAAM,oBACNmD,QAASA,MCAJqH,EAAW,SAAC3H,EAAgBH,EAAKE,EAASzB,EAAKgD,EAAUjB,GACpD,KAAVA,GAtB6B,SAACA,EAAOiB,GACzCjB,IACAiB,EACIsG,KAGJ,IAAItH,EAAUuH,YAAW,SAASC,IAChB,IAAVzH,EACAiB,GDGkB,SAAAA,GAC1BA,EAAS,CACLnE,KAAM,YACNgD,QAAQ,QCFJE,IACAC,EAAUuH,WAAWC,EAAM,KAC3BxG,EACIsG,EAAuBtH,OAGhC,KAIeyH,CAAsB1H,EAAOiB,GAG/C,IAAM3B,EAAiBK,EAAe/B,KAChCb,EAAYkB,EAAG,UACfnB,EAAOmB,EAAG,KAEVsB,EAAaD,EAAiBvC,EAC9B4K,EpBmDe,SAAChI,EAAgB5C,GAKtC,OAJmB4C,EAAe/B,KAAOb,IACX4C,EAAe9B,KoBrD5B+J,CAAgBjI,EAAgB5C,GAG3C8K,EpB0CkB,SAAC1K,EAASJ,GAElC,OADqBE,EAAmB,GAAD,OAAIF,IACvB+K,SAAS3K,GoB5CVyK,CAAmBtI,EAAgBvC,GACtD,GAAI8K,EACA5G,GDxBsB,SAAAA,GAC1BA,EAAS,CACLnE,KAAM,YACNgD,QAAQ,YCwBL,GAAI6H,EAAU,CACjB,IAAMlI,EAAamI,EAAsBrI,ErB3CvB,GqB4ClB0B,EACI8G,EACIjL,EACAwC,EACAC,EACAE,EACAD,EACAE,SAIRuB,EACI+G,EACIlL,EACAwC,EACAC,EACAC,KAMVwI,EAAsB,SACxBlL,EACAmL,EACA1I,EACAC,GAJwB,OAKvB,SAAAyB,GACDA,ED3C4B,SAACnE,EAAMoL,EAAQC,EAAQ3I,GACnD,MAAO,CACH1C,KAAMA,EACNwC,eAAgB4I,EAChB3I,WAAY4I,EACZ3I,IAAKA,GCuCL+H,CACIzK,EACAmL,EACA1I,EACAC,IAGRyB,EDzCO,CACHnE,KAAM,kBACNc,KAAM,OACNgC,SCuCsBL,MAIxBwI,EAAwB,SAC1BjL,EACAmL,EACA1I,EACAE,EACAD,EACAE,GAN0B,OAOzB,SAAAuB,GACDA,ED/C4B,SAC5BnE,EACAmL,EACA1I,EACAE,EACAD,EACAE,GAEA,MAAO,CACH5C,KAAK,GAAD,OAAKA,EAAL,eACJwC,eAAgB2I,EAChB1I,WAAYA,EACZE,WAAYA,EACZD,IAAKA,EACLE,QAASA,GCkCT6H,CACIzK,EACAmL,EACA1I,EACAE,EACAD,EACAE,IAGRuB,EDvC6B,SAAC1B,EAAYE,GAC1C,MAAO,CACH3C,KAAM,cACNc,KAAM,OACNT,QAASoC,EACT1B,KAAM,OACNL,QAASiC,GCkCT8H,CACIhI,EACAE,IAGRwB,EDpGO,CACHnE,KAAM,UACNuB,MAAO,ME+EA+J,EAjFD,SAACpH,GAEX,IAAMC,EAAWC,cACXmH,EAAWjH,aAAY,SAAAT,GAAK,OAAIA,EAAMT,eAE5CmB,IAAMC,WAAU,WACZ,IAAMC,EAAgB,SAAC+G,GACnBrH,EACIkG,EACImB,EAAE7G,SACF,KAIZC,OAAOC,iBAAiB,UAAWJ,GAEnC,IAAMgH,EAAc,SAACD,GACjBrH,EACIkG,EACImB,EAAE7G,SACF,KAIZC,OAAOC,iBAAiB,QAAS4G,GAEjC,IAAMC,EAAe,SAAChH,GAElB,IAAMiH,ErBlCU,SAACC,GACzB,IAAIxI,EAAc,EASlB,OARAtB,OAAOC,KAAK6J,GAAW5J,SACnB,SAAAC,IACmC,IAA3B2J,EAAU3J,GAAK/B,UACfkD,GAAe,MAKpB,CAD4B,IAAhBA,GqByBQyI,CAAaN,GAE1BO,EAAgBpK,EAChBqK,IAAYjK,OAAOC,KAAK+J,GAAed,SAA3B,UAAuCtG,EAAMC,UAI/D,GAAIgH,GAAcI,EAAW,CACzB,IAAMC,EAAStK,EAAA,UAA6BgD,EAAMC,UAClD6F,EACItG,EAAMrB,eACNqB,EAAMxB,IACNwB,EAAMtB,QACNoJ,EACA7H,EACAD,EAAMhB,SAMlB,OAFA0B,OAAOC,iBAAiB,QAAS6G,GAE1B,WAEH9G,OAAOE,oBAAoB,UAAWL,GACtCG,OAAOE,oBAAoB,QAAS4G,GACpC9G,OAAOE,oBAAoB,QAAS2G,MAGzC,CAACtH,EAAUD,EAAOqH,IAGrB,IAAMU,ErBnBmB,SAACC,EAAY9B,EAAQ+B,GAI9C,IAHA,IAAMpK,EAAOD,OAAOC,KAAKmK,GACnBD,EAAQ,GAELvD,EAAI,EAAGA,EAAI3G,EAAKsF,OAAQqB,GAAKyD,EAAW,CAK7C,IAHA,IAAMC,EAAc1D,EAAIyD,EACpBnD,EAAM,GAEDqD,EAAI3D,EAAG2D,EAAID,EAAaC,IAC7BrD,EAAIC,KACA,cAACmB,EAAD,CAEI5I,GAAI6K,EACJ/K,UAAW4K,EAAWG,IAFjBA,IAOjBJ,EAAMhD,KACF,qBAAalE,UAAU,YAAvB,SACKiE,GADKN,IAMlB,OAAOuD,EqBPOK,CACVpI,EAAM7B,QACN+H,EtBtEkB,GsB0EtB,OACI,qBAAKrF,UAAWb,EAAMqI,MAAtB,SACKN,KCpBEO,EA/CF,WACT,IAAMvJ,EAAQqB,aAAY,SAAAT,GAAK,OAAIA,EAAMZ,SACnC8H,EAAazG,aAAY,SAAAT,GAAK,OAAIA,EAAMd,YACxCV,EAAUiC,aAAY,SAAAT,GAAK,OAAIA,EAAMxB,WACrCQ,EAAiByB,aAAY,SAAAT,GAAK,OAAIA,EAAMhB,kBAC5CK,EAAQoB,aAAY,SAAAT,GAAK,OAAIA,EAAMX,MAAMuJ,QACzCtJ,EAAUmB,aAAY,SAAAT,GAAK,OAAIA,EAAMX,MAAMC,WAC3CQ,EAASW,aAAY,SAAAT,GAAK,OAAIA,EAAMF,UACpCQ,EAAWC,cAEjBG,IAAMC,WAAU,WAKRb,GACAQ,EACIuB,EACIhE,EvB0CY,OuBtCzB,CAACyC,EAAUR,IAEd,IAAM+I,EN5BiB,SACvBpB,EACAP,EACA1I,EACAQ,EACAI,EACAC,GAEA,GAAI6H,EAAY,CACZ,IAAM1F,EAAc8D,EAAelG,GAGnC,OACI,gCACI,cAAC,EAAD,CACIP,IjBPS,qBiBQT2C,YAAaA,IAEjB,cAAC,EAAD,OAIR,OACI,sBAAKN,UAAU,aAAf,UACI,qBAAKA,UAAU,QAAf,SAAuB,yCAAY9B,OACnC,qBAAK8B,UAAU,QAAf,SAAuB,wCAAW7B,OAClC,cAACoI,EAAD,CACIiB,MAAM,QACNlK,QAASA,EACTQ,eAAgBA,EAChBH,IAAKhB,EACLkB,QAASlB,EACTwB,MAAOA,OMJR4H,CACXQ,EACAP,EACA1I,EACAQ,EACAI,EACAC,GAEAyJ,ENKA,sBAAK5H,UAAU,eAAf,UACI,uDACA,wCACA,4GACA,sEACA,8EACA,0FMJR,OALIgG,IACA6B,aAAazJ,GACbwJ,EAAqB,MAIrB,sBAAK5H,UAAU,OAAf,UACK2H,EACAC,MC5CbE,IAASH,OACL,cAAC,IAAD,CAAU7I,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJiJ,SAASC,eAAe,W","file":"static/js/main.ba1d66b1.chunk.js","sourcesContent":["export const BOARD_SIZE = 5;\nexport const MAGE_START_POS = 12;\nexport const IMG = process.env.NODE_ENV === \"production\"\n    ? process.env.REACT_APP_PROD_IMG_PATH\n    : process.env.REACT_APP_DEV_IMG_PATH;\n\nexport const COIN = process.env.NODE_ENV === \"production\"\n    ? process.env.REACT_APP_PROD_COIN_IMG_PATH\n    : process.env.REACT_APP_DEV_COIN_IMG_PATH;\n\nconsole.log(IMG);\nconsole.log(process.env.NODE_ENV);\nconsole.log(process.env);\nexport const GAME_OVER_IMG = \"./gameOverGirl.png\";\nexport const SCOREBOARD_RESULTS_ENDPOINT = process.env.REACT_APP_SCOREBOARD_RESULTS_ENDPOINT;\nexport const POST_NEW_SCORE_ENDPOINT = process.env.REACT_APP_POST_NEW_SCORE_ENDPOINT;\nexport const PARTITION_KEY = process.env.REACT_APP_PARTITION_KEY;\n\nexport const BUTTON_SETUP = {\n    left: {\n        type: \"MOVE_LEFT\",\n        posChange: 1\n    },\n    up: {\n        type: \"MOVE_UP\",\n        posChange: 5\n    },\n    right: {\n        type: \"MOVE_RIGHT\",\n        posChange: -1\n    },\n    down: {\n        type: \"MOVE_DOWN\",\n        posChange: -5\n    }\n};\n\nexport const KEY_DOWN_SET_UP = {\n    \"37\": {\n        type: \"MOVE_LEFT\",\n        posChange: 1,\n        pressed: false\n    },\n    \"38\": {\n        type: \"MOVE_UP\",\n        posChange: 5,\n        pressed: false\n    },\n    \"39\": {\n        type: \"MOVE_RIGHT\",\n        posChange: -1,\n        pressed: false\n    },\n    \"40\": {\n        type: \"MOVE_DOWN\",\n        posChange: -5,\n        pressed: false\n    }\n};\n\n//range of indexes moving from which\n//we will get out of range and game will be over\nexport const OUT_OF_RANGE_SETUP = {\n    \"1\": [0, 5, 10, 15, 20],\n    \"5\": [0, 1, 2, 3, 4],\n    \"-1\": [4, 9, 14, 19, 24],\n    \"-5\": [20, 21, 22, 23, 24]\n};\n\nexport const scoreBoardLength = 10;","import React from \"react\";\nimport { OUT_OF_RANGE_SETUP } from \"../constants.js\";\n\nexport const checkForKeys = (keysState) => {\n    let keysPressed = 0;\n    Object.keys(keysState).forEach(\n        key => {\n            if (keysState[key].pressed === true) {\n                keysPressed += 1;\n            }\n        });\n\n    const isMoveMade = keysPressed === 1 ? true : false;\n    return [isMoveMade];\n};\n\nexport const getInitState = (size, startingPos, mage, coin) => {\n    const coinPos = generateCoinPos(startingPos, size);\n    const boardSize = Math.pow(size, 2);\n    const initObj = {};\n\n    const initState = Array(boardSize).fill(null).reduce(\n        (obj, item, index) => {\n\n            const setMage = startingPos === index\n                ? mage\n                : null;\n\n            const setCoin = coinPos === index\n                ? coin\n                : null;\n\n            const squareObj = {\n                value: null,\n                id: index,\n                mage: setMage,\n                coin: setCoin\n            };\n\n            return {\n                ...obj,\n                [index]: squareObj\n            };\n        }, initObj\n    );\n\n    return [initState, coinPos];\n};\n\nexport const generateBoard = (squaresObj, Square, rowLength) => {\n    const keys = Object.keys(squaresObj);\n    const board = [];\n\n    for (let i = 0; i < keys.length; i += rowLength) {\n\n        const rowEndIndex = i + rowLength;\n        let row = [];\n\n        for (let j = i; j < rowEndIndex; j++) {\n            row.push(\n                <Square\n                    key={j}\n                    id={j}\n                    squareObj={squaresObj[j]}\n                />\n            );\n        }\n\n        board.push(\n            <div key={i} className=\"board-row\">\n                {row}\n            </div>\n        );\n\n    }\n    return board;\n};\n\n\nexport const isOutOfRange = (magePos, posChange) => {\n    const outRangeList = OUT_OF_RANGE_SETUP[`${posChange}`];\n    return outRangeList.includes(magePos);\n};\n\n\nexport const hasScored = (coinAndMagePos, posChange) => {\n    const newMagePos = coinAndMagePos.mage - posChange;\n    const result = newMagePos === coinAndMagePos.coin\n        ? true\n        : false;\n    return result;\n};\n\n\nexport const generateCoinPos = (magePos, size) => {\n    const boardSize = Math.pow(size, 2);\n    const coinPos = Math.floor(Math.random() * boardSize);\n\n    if (coinPos === magePos) {\n        const backUpPos = generateCoinPos(magePos, size);\n        return backUpPos;\n\n    } else {\n        return coinPos;\n    }\n};\n","import * as Constants from \"../../constants.js\";\nimport { getInitState } from \"../../utils/boardUtils.js\";\n\n// since coinPos is a random number, need to\n// return it back from InitState func\nconst [initState, coinPos] = getInitState(\n    Constants.BOARD_SIZE,\n    Constants.MAGE_START_POS,\n    Constants.IMG,\n    Constants.COIN\n);\n\nconst initPositions = {\n    \"mage\": Constants.MAGE_START_POS,\n    \"coin\": coinPos\n};\n\nconst initKeysPressed = {};\nObject.keys(Constants.KEY_DOWN_SET_UP).forEach(\n    key => {\n        initKeysPressed[key] = {\n            pressed : Constants.KEY_DOWN_SET_UP[key].pressed\n        };\n    }\n);\n\nconst initTimer = {\n    \"time\": 60,\n    \"timerId\": null\n};\n\n\n// each square calls this and gets updated state\nexport const squares = (state = initState, action) => {\n    switch (action.type) {\n    case \"MOVE_UP\":\n    case \"MOVE_DOWN\":\n    case \"MOVE_RIGHT\":\n    case \"MOVE_LEFT\":\n        return {\n            ...state,\n            [action.currentMagePos]: {\n                ...state[action.currentMagePos],\n                mage: null\n            },\n            [action.newMagePos]: {\n                ...state[action.newMagePos],\n                mage: action.img\n            }\n        };\n    case \"MOVE_UP_COIN_RESET\":\n    case \"MOVE_DOWN_COIN_RESET\":\n    case \"MOVE_RIGHT_COIN_RESET\":\n    case \"MOVE_LEFT_COIN_RESET\":\n        return {\n            ...state,\n            [action.currentMagePos]: {\n                ...state[action.currentMagePos],\n                mage: null\n            },\n            [action.newMagePos]: {\n                ...state[action.newMagePos],\n                mage: action.img,\n                coin: null\n            },\n            [action.newCoinPos]: {\n                ...state[action.newCoinPos],\n                coin: action.coinImg,\n                mage: null\n            }\n        };\n    case \"RESET\":\n        return initState;\n    default:\n        return state;\n    }\n};\n\nexport const coinAndMagePos = (state = initPositions, action) => {\n    switch (action.type) {\n    case \"UPDATE_BOTH\":\n        return {\n            ...state,\n            [action.coin]: action.coinPos,\n            [action.mage]: action.magePos\n        };\n    case \"UPDATE_MAGE_POS\":\n        return {\n            ...state,\n            [action.mage]: action.position\n        };\n    case \"UPDATE_COIN_POS\":\n        return {\n            ...state,\n            [action.coin]: action.position\n        };\n    case \"RESET\":\n        return initPositions;\n    default:\n        return state;\n    }\n};\n\nexport const keysPressed = (state = initKeysPressed, action) => {\n    switch (action.type) {\n    case \"BUTTON_KEY_DOWN\":\n        return {\n            ...state,\n            [action.keyId] : {\n                pressed : true\n            }\n        };\n    case \"BUTTON_KEY_UP\":\n        return {\n            ...state,\n            [action.keyId] : {\n                pressed : false\n            }\n        };\n    case \"RESET\":\n        return initKeysPressed;\n    default:\n        return state;\n    }\n};\n\nexport const timer = (state = initTimer, action) => {\n    switch (action.type) {\n    case \"DECREMENT_COUNTER\":\n        return {\n            ...state,\n            \"time\": state[\"time\"] - 1,\n            \"timerId\": action.timerId\n        };\n    case \"RESET\":\n        return initTimer;\n    default:\n        return state;\n    }\n};\n\nexport const gameOver = (state = false, action) => {\n    switch (action.type) {\n    case \"GAME_OVER\":\n        return action.isOver;\n    case \"RESET\":\n        return false;\n    default:\n        return state;\n    }\n};\n\nexport const score = (state = 0, action) => {\n    switch (action.type) {\n    case \"ADD_ONE\":\n        return state + action.value;\n    case \"RESET\":\n        return 0;\n    default:\n        return state;\n    }\n};","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport * as BoardReducers from \"./store/reducers/boardReducer.js\";\nimport * as GameReducers from \"./store/reducers/gameReducer.js\";\nimport * as scoreBoardReducers from \"./store/reducers/scoreBoardReducer.js\";\n\nconst rootReducer = combineReducers({\n    squares: BoardReducers.squares,\n    coinAndMagePos: BoardReducers.coinAndMagePos,\n    gameOver: BoardReducers.gameOver,\n    score: BoardReducers.score,\n    timer: BoardReducers.timer,\n    keysPressed: BoardReducers.keysPressed,\n    scoreboard: GameReducers.scoreboard,\n    topScores: GameReducers.topScores,\n    swapScoreBoard: scoreBoardReducers.swapScoreBoard,\n    userName: scoreBoardReducers.userName,\n});\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n);\n\nexport { store };","export const scoreboard = (state = [], action) => {\n    switch (action.type) {\n    case \"SET_SCOREBOARD\":\n        return action.scoreBoardRows;\n    default:\n        return state;\n    }\n};\n\n// setting init state to null to catch\n// when the board is loading, but the function to calc\n// the new record has run\n// added this handler to the checkForNewRecord func\n// and in case the board contains no records == []\nexport const topScores = (state = null, action) => {\n    switch (action.type) {\n    case \"SET_TOP_SCORES\":\n        return action.scores;\n    default:\n        return state;\n    }\n};\n\n","export const swapScoreBoard = (state = false, action) => {\n    switch (action.type) {\n    case \"SWAP_SCOREBOARD\":\n        return action.doSwap;\n    case \"RESET\":\n        return false;\n    default:\n        return state;\n    }\n};\n\nexport const userName = (state = \"\", action) => {\n    switch (action.type) {\n    case \"SET_USER_NAME\":\n        return action.userName;\n    case \"RESET\":\n        return \"\";\n    default:\n        return state;\n    }\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst GameOver = (props) => {\n    const dispatch = useDispatch();\n    const isNewTopTenScore = useSelector(store => store.swapScoreBoard);\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isReset = event.keyCode === 13\n                ? true\n                : false;\n\n            if (isReset && !isNewTopTenScore) {\n                dispatch({\n                    type: \"RESET\",\n                });\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener(\"keydown\", handleKeyDown);\n        };\n\n    }, [dispatch, isNewTopTenScore]);\n\n    return (\n        <div className=\"game-board\">\n            <div className=\"board lost\">\n                <img src={props.img}\n                    style={{ width: \"25%\", height: \"25%\" }}\n                    alt='nothing'\n                />\n                {props.renderScore}\n            </div>\n            <button className=\"resetButton\" onClick={() =>\n                dispatch({\n                    type: \"RESET\",\n                })\n            }>restart</button>\n        </div>\n    );\n};\n\nGameOver.propTypes = {\n    img : PropTypes.string,\n    renderScore : PropTypes.number,\n};\n\nexport default GameOver;","export const swapScoreBoard = (isSwap) => dispatch => {\n    dispatch({\n        type: \"SWAP_SCOREBOARD\",\n        doSwap: isSwap\n    });\n};\n\nexport const setUserName = (userName) => dispatch => {\n    dispatch({\n        type: \"SET_USER_NAME\",\n        userName: userName\n    });\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Score = (props) => {\n    return (\n        <div className=\"row\">\n            <div className=\"row-sub\" id=\"index\">\n                {props.index}\n            </div>\n            <div className=\"row-sub\" id=\"name\">\n                {props.user}\n            </div>\n            <div className=\"row-sub\" id=\"score\">\n                {props.score}\n            </div>\n        </div>\n    );\n};\n\nScore.propTypes = {\n    index : PropTypes.number,\n    user : PropTypes.string,\n    score : PropTypes.number\n};\n\nexport default Score;","import { setTopScores, setScoreboard } from \"../../actions/gameActions\";\nimport { getScoreboardRows } from \"../../api/api.js\";\nimport { getOnlyScores, getTopSortedScores } from \"../../utils/gameUtils.js\";\n\n// get the response from the api, use func to process data...\n// ...save processed data to the redux store.\nexport const getScoreBoardThunk = (partitionKey, howMany) => dispatch => {\n    getScoreboardRows(partitionKey)\n        .then(response => getTopSortedScores(response.data, howMany))\n        .then(processedData => {\n            dispatch(setScoreboard(processedData));\n            return getOnlyScores(processedData);\n\n        }).then(onlyScores => dispatch(setTopScores(onlyScores))\n        ).catch(err => alert(`Ops! Something is Wrong with the Scoreboard load:${err.message}`));\n};","import * as axios from \"axios\";\nimport {\n    SCOREBOARD_RESULTS_ENDPOINT,\n    POST_NEW_SCORE_ENDPOINT,\n    PARTITION_KEY\n} from \"../constants.js\";\n\nexport const getScoreboardRows = (partitionKey) => {\n    try {\n        return (\n            axios.get(\n                SCOREBOARD_RESULTS_ENDPOINT,\n                {\n                    params: { partitionKey: partitionKey },\n                    headers: {\"Access-Control-Allow-Origin\": \"*\"}\n                }\n            )\n        );\n\n    } catch (error) {\n        console.log(`Request was not successful. Error:${error}`);\n    }\n};\n\nexport const postNewScore = (userName, score) => {\n    try {\n        return (\n            axios.get(\n                POST_NEW_SCORE_ENDPOINT,\n                {\n                    params: {\n                        \"partitionKey\": PARTITION_KEY,\n                        \"userName\" : userName,\n                        \"score\" : score\n                    },\n                    headers: {\n                        \"Access-Control-Allow-Origin\": \"*\",\n                    }\n                }\n            )\n        );\n    } catch (error) {\n        console.log(`Request was not successful. Error:${error}`);\n    }\n};","export const setScoreboard = (scoreBoardRows) => dispatch => {\n    dispatch({\n        type: \"SET_SCOREBOARD\",\n        scoreBoardRows: scoreBoardRows\n    });\n};\n\nexport const setTopScores = (topScores) => dispatch => {\n    dispatch({\n        type: \"SET_TOP_SCORES\",\n        scores: topScores\n    });\n};\n","import { postNewScore } from \"../../api/api.js\";\nimport { swapScoreBoard } from \"../../actions/scoreBoardActions.js\";\nimport { getScoreBoardThunk } from \"./gameThunkCreators.js\";\n\n// set new score in the table and re-generate scoreboard\nexport const setNewScoreThunk = (userName, score, partitionKey, howMany) => dispatch => {\n    postNewScore(userName, score)\n        .then(response => {\n            if (response.status === 200) return response;\n        }).then(() => {\n            dispatch(\n                getScoreBoardThunk(\n                    partitionKey,\n                    howMany\n                )\n            );}).then(() => {\n            dispatch(\n                swapScoreBoard(\n                    false\n                )\n            );\n        }).catch(\n            err => alert(`Ops! Something is Wrong with a new score upload:${err.message}`)\n        );\n};","import { setNewScoreThunk } from \"../store/thunkCreators/nameFormThunkCreators\";\n\nexport const handleSubmit = (event, userName, whichIndex, itemAtIndex, score, dispatch) => {\n    event.preventDefault();\n\n    if (userName.trim().length === 0)\n        alert(\"You can't submit a blank form!\");\n\n    // run through regex\n    const isOnlyStandardChars = /^[a-zA-Z1-9-_*$]+$/.test(userName);\n\n    if (!isOnlyStandardChars) {\n        alert(\"You can only use a-z, A-Z, 1-9, -, _ , * ,$ characters.\");\n    } else {\n        const confirmUserName = prompt(`Submitting you score under userName: ${userName}? (yes/no)`);\n\n        if (confirmUserName === null) {\n            alert(\"You are a picky one!\\nChange your name or restart the game!\");\n\n        } else if (confirmUserName.toLowerCase() === \"yes\") {\n            alert(\"sweet!\");\n            dispatch(setNewScoreThunk(userName, score, \"sergey\", 10));\n        }\n    }\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserName } from \"../actions/scoreBoardActions.js\";\nimport { handleSubmit } from \"../utils/nameFormUtils.js\";\n\nconst NameForm = (props) => {\n    const dispatch = useDispatch();\n    const userName = useSelector(store => store.userName);\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isSubmit = event.keyCode === 13\n                ? true\n                : false;\n\n            if (isSubmit) {\n                handleSubmit(\n                    event,\n                    userName,\n                    props.whichIndex,\n                    props.itemAtIndex,\n                    props.score,\n                    dispatch\n                );\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, [dispatch, props, userName]);\n\n    return (\n        <div className='winner'>\n            <div className='congrats'>\n                <h1>Congrats on setting a new Record!</h1>\n            </div>\n            <form onSubmit={\n                event => handleSubmit(\n                    event,\n                    userName,\n                    props.whichIndex,\n                    props.itemAtIndex,\n                    props.score,\n                    dispatch\n                )}>\n                <label>\n                    How should we write you down in History?\n                    <br></br>\n                    <input\n                        type='text'\n                        onChange={event => dispatch(\n                            setUserName(event.target.value)\n                        )}\n                    />\n                </label>\n                <br></br>\n                <button className='submit' type='Submit'>\n                    submit\n                </button>\n            </form>\n        </div>\n    );\n};\n\nNameForm.propTypes = {\n    whichIndex : PropTypes.number,\n    itemAtIndex : PropTypes.any,\n    score : PropTypes.number,\n};\n\nexport default NameForm;","import React from \"react\";\n\nexport const getRowElements = (topScores, Score) => {\n    const rows = [];\n\n    topScores.forEach((row, index) => rows.push(\n        <Score key={index + 1}\n            index={index + 1}\n            user={row.User}\n            score={row.Score}\n        />\n    ));\n\n    return rows;\n};\n\nconst getCountOfMinNums = (topScoresArr) => {\n    const minNum = Math.min(...topScoresArr);\n    const minNumsCount = topScoresArr.reduce(\n        (accum, currVal) => {\n            const val = currVal === minNum ? 1 : 0;\n            return accum + val;\n        }\n    );\n    return [minNum , minNumsCount];\n};\n\n/**\n * This function is used to determine if new top 10 score is achieved\n *\n * @param score - user's current score for a given game played.\n * @param topScoresArray -- an array of scores received from the back-end.\n * It contains only scores, sorted in desc order.\n * @param {*} boardLength -- a parameter that controls the size of the board\n * to be displayed.\n * @returns an array [newRecordSet, whichIndex] - [bool, integer]\n *\n */\nexport const checkForNewRecord = (score, topScoresArray, boardLength) => {\n    let newRecordSet = false;\n    let whichIndex;\n\n    // if there are > 1 min score in results, new records won't show on the board.\n    // therefore I will exclude them from the calculation.\n\n    //adding this condition to excludre run for when the board is still loading\n    if (topScoresArray === null) {\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is the first score on the board\n    if (\n        topScoresArray.length === 0\n        && score !== 0\n    ) {\n        newRecordSet = true;\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is the new highest score on the board\n    if (score >= topScoresArray[0]) {\n        newRecordSet = true;\n        whichIndex = 0;\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is not a new top score, but the board is not full yet\n    if (\n        !newRecordSet\n        && topScoresArray.length < boardLength\n        && score !== 0\n    ) {\n        newRecordSet = true;\n        return [newRecordSet, whichIndex];\n    }\n\n    if (topScoresArray.length !== 0) {\n        const [minNum, minNumsCount] = getCountOfMinNums(topScoresArray);\n        // for everything else\n        for (\n            let i = 0;\n            i < topScoresArray.length - 1;\n            i++\n        ) {\n            if (\n                score < topScoresArray[i]\n                && score >= topScoresArray[i + 1]\n                && score !== minNum\n            ) {\n                newRecordSet = true;\n                whichIndex = i + 1;\n                break;\n            }\n            else if  (\n                score === minNum\n                && minNumsCount < 1\n            ) {\n                newRecordSet = true;\n                whichIndex = i + 1;\n                break;\n            }\n        }\n    }\n\n    return [newRecordSet, whichIndex];\n};","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { swapScoreBoard } from \"../actions/scoreBoardActions.js\";\nimport Score from \"./Score.js\";\nimport NameForm from \"./NameForm.js\";\nimport * as ScoreBoardUtils from \"../utils/scoreBoardUtils.js\";\nimport * as Constants from \"../constants.js\";\n\nexport const Scoreboard = () => {\n    const dispatch = useDispatch();\n    const score = useSelector(store => store.score);\n    const scoreBoardResults = useSelector(store => store.scoreboard);\n    const onlyScores = useSelector(store => store.topScores);\n    const doSwap = useSelector(store => store.swapScoreBoard);\n\n    React.useEffect(() => {\n        const resultArr = ScoreBoardUtils.checkForNewRecord(\n            score,\n            onlyScores,\n            Constants.scoreBoardLength\n        );\n        const newRecordSet = resultArr[0];\n\n        if (newRecordSet) {\n            dispatch(\n                swapScoreBoard(true)\n            );\n        }\n\n    }, [dispatch, score, onlyScores]);\n\n    const rowElements = ScoreBoardUtils.getRowElements(\n        scoreBoardResults,\n        Score\n    );\n\n    const resultArr = ScoreBoardUtils.checkForNewRecord(\n        score,\n        onlyScores,\n        Constants.scoreBoardLength\n    );\n    const whichIndex = resultArr[1];\n\n\n    if (doSwap) {\n        return (\n            <NameForm\n                whichIndex={whichIndex}\n                itemAtIndex={scoreBoardResults[whichIndex]}\n                score={score}\n            />\n        );\n    } else {\n        return (\n            <div className='table'>\n                <div className='header'>scoreboard</div>\n                <div className='column-headers'>\n                    <div className='row-sub' id=\"index\">\n                        Place\n                    </div>\n                    <div className='row-sub' id=\"name\">\n                        User\n                    </div>\n                    <div className='row-sub' id=\"score\">\n                        Score\n                    </div>\n                </div>\n                {rowElements}\n            </div>\n        );\n    }\n};\n\nexport default Scoreboard;\n","import React from \"react\";\nimport * as Constants from \"../constants.js\";\nimport GameOver from \"../components/GameOver.js\";\nimport Scoreboard from \"../components/ScoreBoard.js\";\n\nexport const renderBoard = (\n    Board,\n    isGameOver,\n    squares,\n    coinAndMagePos,\n    score,\n    timer\n) => {\n    if (isGameOver) {\n        const renderScore = renderGameOver(score);\n        const img = Constants.GAME_OVER_IMG;\n\n        return (\n            <div>\n                <GameOver\n                    img={img}\n                    renderScore={renderScore}\n                />\n                <Scoreboard />\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"game-board\">\n                <div className=\"score\"><h2>Score: {score}</h2></div>\n                <div className=\"timer\"><h2>Time: {timer}</h2></div>\n                <Board\n                    class=\"board\"\n                    squares={squares}\n                    coinAndMagePos={coinAndMagePos}\n                    img={Constants.IMG}\n                    coinImg={Constants.COIN}\n                    timer={timer}\n                />\n            </div>\n        );\n    }\n};\n\nexport const renderInstructions = () => {\n    return (\n        <div className=\"instructions\">\n            <h1>Collect all the DOGE!</h1>\n            <h2>Rules:</h2>\n            <h3>1. Use keyboard arrows (← ↑ ↓ →) to move the character</h3>\n            <h3>1. Use Enter key to restart the game</h3>\n            <h3>2. If you move over the edge it is game over</h3>\n            <h3>3. Collect as many DOGE in 60 sec to fly to the moon!</h3>\n        </div>\n    );\n};\n\nconst renderGameOver = (score) => {\n    const msg = getScoreMessage(score);\n\n    return (\n        <div className=\"finalScore\">\n            <h2>Your Score: {score}</h2>\n            <h3>{msg}</h3>\n        </div>\n    );\n};\n\nconst getScoreMessage = (score) => {\n    let msg = null;\n\n    if (score >= 0) msg=\"Try harder next time!\";\n    if (score > 5) msg=\"Are you sure you are using keyboard?\";\n    if (score > 10) msg=\"Your rocket crashed back on Earth!\";\n    if (score > 20) msg=\"I can see DODG high in the sky!\";\n    if (score > 50) msg=\"You are really good at this!\";\n    if (score > 75) msg=\"TO THE MOOOON!\";\n\n    return msg;\n};\n\nexport const getOnlyScores = (scoresObj) => {\n    const onlyScores = [];\n    scoresObj.forEach(\n        row => onlyScores.push(row[\"Score\"])\n    );\n\n    return onlyScores;\n};\n\nexport const getTopSortedScores = (scoreBoardResults, howMany) => {\n    const scoreBoardArray = Object.entries(scoreBoardResults);\n\n    const scores = [];\n    scoreBoardArray.forEach(\n        row =>\n            scores.push({\n                \"User\": row[0],\n                \"Score\": parseInt(row[1][\"Score\"]),\n                \"RowKey\" : row[1][\"TimeStamp\"]\n            })\n    );\n\n    scores.sort(sortScores);\n    return scores.slice(0, howMany);\n};\n\nconst sortScores = (a, b) => {\n    const scoreA = parseInt(a[\"Score\"]);\n    const scoreB = parseInt(b[\"Score\"]);\n\n    if (scoreA > scoreB) return -1;\n    if (scoreA === scoreB) return 0;\n    if (scoreA < scoreB) return 1;\n};","import React from \"react\";\n\nexport const getImage = (whichImage, image) => {\n    switch (whichImage) {\n    case \"mage\": {\n        const mage = image\n            ? <img src={image}\n                style={{ width: \"100%\", height: \"100%\" }}\n                alt='mage' />\n            : null;\n        return mage;\n    }\n    case \"coin\": {\n        const coin = image\n            ? <img src={image}\n                style={{ width: \"50%\", height: \"50%\" }}\n                alt='coin' />\n            : null;\n        return coin;\n    }\n    default:\n        return null;\n    }\n};\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getImage } from \"../utils/squareUtils\";\n\nconst Square = (props) => {\n    const squareObj = props.squareObj;\n\n    const mage = getImage(\"mage\", squareObj.mage);\n    const coin = getImage(\"coin\", squareObj.coin);\n\n    return (\n        <div className=\"square\" id={props.id} >\n            {mage || coin}\n        </div>\n    );\n};\n\nSquare.propTypes = {\n    squareObj : PropTypes.object,\n    mage : PropTypes.string,\n    coin : PropTypes.string,\n    id : PropTypes.number\n};\n\nexport default Square;","export const setKeysDown = (keyId, isKeyDown) => dispatch => {\n    const type = isKeyDown ? \"BUTTON_KEY_DOWN\" : \"BUTTON_KEY_UP\";\n    dispatch({\n        type: type,\n        keyId: keyId\n    });\n};\n\nexport const addOne = () => {\n    return {\n        type: \"ADD_ONE\",\n        value: 1\n    };\n};\n\nexport const gameOver = () => dispatch => {\n    dispatch({\n        type: \"GAME_OVER\",\n        isOver: true\n    });\n};\n\nexport const decrementTimer = (timerId) => dispatch => {\n    dispatch({\n        type: \"DECREMENT_COUNTER\",\n        timerId: timerId\n    });\n};\n\nexport const updateMageSquare = (type, curPos, newPos, img) => {\n    return {\n        type: type,\n        currentMagePos: curPos,\n        newMagePos: newPos,\n        img: img\n    };\n};\n\nexport const updateMagePos = (newPos) => {\n    return {\n        type: \"UPDATE_MAGE_POS\",\n        mage: \"mage\",\n        position: newPos\n    };\n};\n\nexport const updateCoinSquare = (\n    type,\n    curMagePos,\n    newMagePos,\n    newCoinPos,\n    img,\n    coinImg\n) => {\n    return {\n        type: `${type}_COIN_RESET`,\n        currentMagePos: curMagePos,\n        newMagePos: newMagePos,\n        newCoinPos: newCoinPos,\n        img: img,\n        coinImg: coinImg\n    };\n};\n\nexport const updateCoinMagePos = (newMagePos, newCoinPos) => {\n    return {\n        type: \"UPDATE_BOTH\",\n        mage: \"mage\",\n        magePos: newMagePos,\n        coin: \"coin\",\n        coinPos: newCoinPos\n    };\n};","import * as Actions from \"../actions/boardActions.js\";\nimport * as Utils from \"../utils/boardUtils.js\";\nimport * as Constants from \"../constants.js\";\n\nexport const startDecrementCounter = (timer, dispatch) => {\n    timer--;\n    dispatch(\n        Actions.decrementTimer()\n    );\n\n    let timerId = setTimeout(function tick() {\n        if (timer === 0) {\n            dispatch(\n                Actions.gameOver()\n            );\n        } else {\n            timer--;\n            timerId = setTimeout(tick, 1000);\n            dispatch(\n                Actions.decrementTimer(timerId)\n            );\n        }\n    }, 1000);\n};\n\nexport const makeMove = (coinAndMagePos, img, coinImg, obj, dispatch, timer) => {\n    if (timer === 60) startDecrementCounter(timer, dispatch); // start time ticks on first move\n\n    // do a check to see if we have gone over the boarder first\n    const currentMagePos = coinAndMagePos.mage;\n    const posChange = obj[\"posChange\"];\n    const type = obj[\"type\"];\n\n    const newMagePos = currentMagePos - posChange;\n    const isScored = Utils.hasScored(coinAndMagePos, posChange);\n\n\n    const isGameOver = Utils.isOutOfRange(currentMagePos, posChange);\n    if (isGameOver) {\n        dispatch(\n            Actions.gameOver()\n        );\n    } else if (isScored) {\n        const newCoinPos = Utils.generateCoinPos(newMagePos, Constants.BOARD_SIZE);\n        dispatch(\n            updateStateWhenScored(\n                type,\n                currentMagePos,\n                newMagePos,\n                newCoinPos,\n                img,\n                coinImg\n            )\n        );\n    } else {\n        dispatch(\n            updateStateWhenMove(\n                type,\n                currentMagePos,\n                newMagePos,\n                img\n            )\n        );\n    }\n};\n\nconst updateStateWhenMove = (\n    type,\n    curMagePos,\n    newMagePos,\n    img,\n) => dispatch => {\n    dispatch(\n        Actions.updateMageSquare(\n            type,\n            curMagePos,\n            newMagePos,\n            img,\n        )\n    );\n    dispatch(\n        Actions.updateMagePos(newMagePos)\n    );\n};\n\nconst updateStateWhenScored = (\n    type,\n    curMagePos,\n    newMagePos,\n    newCoinPos,\n    img,\n    coinImg,\n) => dispatch => {\n    dispatch(\n        Actions.updateCoinSquare(\n            type,\n            curMagePos,\n            newMagePos,\n            newCoinPos,\n            img,\n            coinImg\n        )\n    );\n    dispatch(\n        Actions.updateCoinMagePos(\n            newMagePos,\n            newCoinPos\n        )\n    );\n    dispatch(\n        Actions.addOne()\n    );\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Constants from \"../constants.js\";\nimport Square from \"./Square.js\";\nimport { checkForKeys, generateBoard } from \"../utils/boardUtils.js\";\nimport { makeMove } from \"../actionCreators/boardActionCreators.js\";\nimport { setKeysDown } from \"../actions/boardActions.js\";\n\nconst Board = (props) => {\n    // adding here since this components unmounts if we lose the game\n    const dispatch = useDispatch();\n    const keyDowns = useSelector(store => store.keysPressed);\n\n    React.useEffect(() => {\n        const handleKeyDown = (e) => {\n            dispatch(\n                setKeysDown(\n                    e.keyCode,\n                    true\n                )\n            );\n        };\n        window.addEventListener(\"keydown\", handleKeyDown);\n\n        const handleKeyUp = (e) => {\n            dispatch(\n                setKeysDown(\n                    e.keyCode,\n                    false\n                )\n            );\n        };\n        window.addEventListener(\"keyup\", handleKeyUp);\n\n        const registerMove = (event) => {\n            // only accept single keyDown as a move made.\n            const isMoveMade = checkForKeys(keyDowns);\n\n            const keysFromSetUp = Constants.KEY_DOWN_SET_UP;\n            const isInCodes = Object.keys(keysFromSetUp).includes(`${event.keyCode}`)\n                ? true\n                : false;\n\n            if (isMoveMade && isInCodes) {\n                const keyObj = Constants.KEY_DOWN_SET_UP[`${event.keyCode}`];\n                makeMove(\n                    props.coinAndMagePos,\n                    props.img,\n                    props.coinImg,\n                    keyObj,\n                    dispatch,\n                    props.timer\n                );\n            }\n        };\n        window.addEventListener(\"keyup\", registerMove);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"keyup\", registerMove);\n            window.removeEventListener(\"keyup\", handleKeyUp);\n        };\n\n    }, [dispatch, props, keyDowns]);\n\n\n    const board = generateBoard(\n        props.squares,\n        Square,\n        Constants.BOARD_SIZE\n    );\n\n    return (\n        <div className={props.class}>\n            {board}\n        </div>\n    );\n};\n\nBoard.propTypes = {\n    coinAndMagePos : PropTypes.object,\n    img : PropTypes.string,\n    coinImg : PropTypes.string,\n    timer : PropTypes.number,\n    squares : PropTypes.object,\n    class : PropTypes.string,\n};\n\nexport default Board;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"../index.css\";\nimport * as Utils from \"../utils/gameUtils.js\";\nimport * as Constants from \"../constants.js\";\nimport { getScoreBoardThunk } from \"../store/thunkCreators/gameThunkCreators.js\";\nimport Board from \"./Board.js\";\n\n\nconst Game = () => {\n    const score = useSelector(store => store.score);\n    const isGameOver = useSelector(store => store.gameOver);\n    const squares = useSelector(store => store.squares);\n    const coinAndMagePos = useSelector(store => store.coinAndMagePos);\n    const timer = useSelector(store => store.timer.time);\n    const timerId = useSelector(store => store.timer.timerId);\n    const doSwap = useSelector(store => store.doSwap);\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        // get top scores, sort then, and save in store\n        // doSwap is set if a new score record is achieved\n        // it is reset to false when a record has successfully commited\n        // to store. In this case, we need results re-render.\n        if(!doSwap)\n            dispatch(\n                getScoreBoardThunk(\n                    Constants.PARTITION_KEY,\n                    Constants.scoreBoardLength\n                )\n            );\n    }, [dispatch, doSwap]);\n\n    const render = Utils.renderBoard(\n        Board,\n        isGameOver,\n        squares,\n        coinAndMagePos,\n        score,\n        timer\n    );\n    let renderInstructions = Utils.renderInstructions();\n\n    if (isGameOver) {\n        clearTimeout(timerId);\n        renderInstructions = null;\n    }\n\n    return (\n        <div className=\"game\">\n            {render}\n            {renderInstructions}\n        </div>\n    );\n};\n\nexport default Game;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { store } from \"./store.js\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport Game from \"./components/Game\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <Game />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}