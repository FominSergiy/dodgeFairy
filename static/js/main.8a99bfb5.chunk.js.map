{"version":3,"sources":["constants.js","features/game-over/gameOver.js","features/scoreboard/scoreboardUtils.js","redux/actions.js","requests.js","features/scoreboard/scoreboard.js","utils/utils.js","redux/reducers.js","redux/store.js","features/square/square.js","features/button-controls/buttonUtils.js","features/board/board.js","index.js"],"names":["IMG","COIN","PARTITION_KEY","process","KEY_DOWN_SET_UP","type","posChange","pressed","OUT_OF_RANGE_SETUP","GameOver","props","dispatch","useDispatch","isNewTopTenScore","useSelector","store","swapScoreBoard","React","useEffect","handleKeyDown","event","keyCode","window","addEventListener","removeEventListener","className","src","img","style","width","height","alt","renderScore","onClick","sortScores","a","b","scoreA","parseInt","scoreB","checkForNewRecord","score","topScoresArray","boardLength","whichIndex","newRecordSet","length","topScoresArr","minNum","Math","min","minNumsCount","reduce","accum","currVal","getCountOfMinNums","i","handleSubmit","userName","itemAtIndex","preventDefault","trim","alert","test","confirmUserName","prompt","toLowerCase","setNewScoreThunk","decrementTimer","timerId","getScoreBoardThunk","partitionKey","howMany","axios","params","error","console","log","getScoreboardRows","then","response","scoreBoardResults","scoreBoardArray","Object","entries","scores","forEach","row","push","sort","slice","getTopSortedScores","data","processedData","scoreBoardRows","scoresObj","onlyScores","getOnlyScores","topScores","catch","err","message","postNewScore","status","isSwap","doSwap","setKeysDown","keyId","isKeyDown","Scoreboard","scoreboard","ScoreBoardUtils","rowElements","Score","rows","index","user","User","id","NameForm","onSubmit","onChange","setUserName","target","value","generateCoinPos","magePos","size","boardSize","pow","coinPos","floor","random","renderGameOver","msg","getScoreMessage","startingPos","mage","coin","Array","fill","obj","item","squareObj","getInitState","Constants","initState","initPositions","initTimer","initKeysPressed","keys","key","rootReducer","combineReducers","squares","state","action","currentMagePos","newMagePos","newCoinPos","coinImg","coinAndMagePos","position","gameOver","isOver","timer","keysPressed","createStore","applyMiddleware","thunkMiddleware","Square","getImage","whichImage","image","makeMove","startDecrementCounter","isScored","hasScored","isOutOfRange","curMagePos","updateCoinSquare","updateCoinMagePos","Actions","curPos","newPos","updateMageSquare","setTimeout","tick","includes","Board","keyDowns","e","handleKeyUp","registerMove","isMoveMade","checkForKeys","keysFromSetUp","isInCodes","keyObj","board","squaresObj","rowLength","rowEndIndex","j","Utils","class","keysState","Game","isGameOver","time","render","renderInstructions","clearTimeout","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8a99bfb5.chunk.js","sourcesContent":["export const BOARD_SIZE = 5;\nexport const MAGE_START_POS = 12;\nexport const IMG = \"./mage.gif\";\nexport const COIN = \"./dodg.gif\";\nexport const GAME_OVER_IMG = './gameOverGirl.png';\nexport const SCOREBOARD_RESULTS_ENDPOINT = process.env.REACT_APP_SCOREBOARD_RESULTS_ENDPOINT;\nexport const POST_NEW_SCORE_ENDPOINT = process.env.REACT_APP_POST_NEW_SCORE_ENDPOINT;\nexport const PARTITION_KEY = process.env.REACT_APP_PARTITION_KEY;\n\nexport const BUTTON_SETUP = {\n    left: {\n        type: 'MOVE_LEFT',\n        posChange: 1\n    },\n    up: {\n        type: 'MOVE_UP',\n        posChange: 5\n    },\n    right: {\n        type: 'MOVE_RIGHT',\n        posChange: -1\n    },\n    down: {\n        type: 'MOVE_DOWN',\n        posChange: -5\n    }\n}\n\nexport const KEY_DOWN_SET_UP = {\n    '37': {\n        type: 'MOVE_LEFT',\n        posChange: 1,\n        pressed: false\n    },\n    '38': {\n        type: 'MOVE_UP',\n        posChange: 5,\n        pressed: false\n    },\n    '39': {\n        type: 'MOVE_RIGHT',\n        posChange: -1,\n        pressed: false\n    },\n    '40': {\n        type: 'MOVE_DOWN',\n        posChange: -5,\n        pressed: false\n    }\n}\n\n//range of indexes moving from which\n//we will get out of range and game will be over\nexport const OUT_OF_RANGE_SETUP = {\n    \"1\": [0, 5, 10, 15, 20],\n    \"5\": [0, 1, 2, 3, 4],\n    \"-1\": [4, 9, 14, 19, 24],\n    \"-5\": [20, 21, 22, 23, 24]\n};\n\nexport const scoreBoardLength = 10;","import { useDispatch, useSelector } from \"react-redux\";\nimport React from 'react';\n\nexport const GameOver = (props) => {\n    const dispatch = useDispatch();\n    const isNewTopTenScore = useSelector(store => store.swapScoreBoard);\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isReset = event.keyCode === 13\n                ? true\n                : false;\n    \n            // \n            if (isReset && !isNewTopTenScore) {\n                dispatch({\n                    type: 'RESET',\n                })\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n\n    }, [dispatch, isNewTopTenScore]);\n\n    return (\n        <div className=\"game-board\">\n                <div className=\"board lost\">\n                    <img src={props.img} \n                         style={{ width: \"25%\", height: \"25%\" }} \n                         alt='nothing'\n                    />\n                    {props.renderScore}\n                </div>\n                <button className=\"resetButton\" onClick={() =>\n                    dispatch({\n                        type: 'RESET',\n                    })\n                }>restart</button>\n        </div>\n    )\n}","import { setNewScoreThunk } from '../../redux/actions.js';\n\nconst sortScores = (a, b) => {\n    const scoreA = parseInt(a['Score']);\n    const scoreB = parseInt(b['Score']);\n\n    if (scoreA > scoreB) return -1;\n    if (scoreA === scoreB) return 0;\n    if (scoreA < scoreB) return 1;\n}\n\n\nexport const getTopSortedScores = (scoreBoardResults, howMany) => {\n    const scoreBoardArray = Object.entries(scoreBoardResults);\n\n    const scores = [];\n    scoreBoardArray.forEach(\n        row =>\n            scores.push({\n                'User': row[0],\n                'Score': parseInt(row[1]['Score']),\n                'RowKey' : row[1]['TimeStamp']\n            })\n    );\n\n    scores.sort(sortScores);\n    return scores.slice(0, howMany);\n}\n\nexport const getOnlyScores = (scoresObj) => {\n    const onlyScores = [];\n    scoresObj.forEach(\n        row => onlyScores.push(row['Score'])\n    );\n\n    return onlyScores;\n}\n\nexport const getRowElements = (topScores, Score) => {\n    const rows = [];\n\n    topScores.forEach((row, index) => rows.push(\n        <Score key={index + 1}\n            index={index + 1}\n            user={row.User}\n            score={row.Score}\n        />\n    ));\n\n    return rows;\n}\n\n\nconst getCountOfMinNums = (topScoresArr) => {\n    const minNum = Math.min(...topScoresArr);\n    const minNumsCount = topScoresArr.reduce(\n        (accum, currVal) => {\n            const val = currVal === minNum ? 1 : 0;\n            return accum + val;\n        }\n    );\n    return [minNum , minNumsCount];\n}\n\n/**\n * This function is used to determine if new top 10 score is achieved\n * \n * @param score - user's current score for a given game played.\n * @param topScoresArray -- an array of scores received from the back-end.\n * It contains only scores, sorted in desc order.\n * @param {*} boardLength -- a parameter that controls the size of the board\n * to be displayed.\n * @returns an array [newRecordSet, whichIndex] - [bool, integer]\n * \n */\nexport const checkForNewRecord = (score, topScoresArray, boardLength) => {\n    let newRecordSet = false;\n    let whichIndex;\n\n    // if there are > 1 min score in results, new records won't show on the board.\n    // therefore I will exclude them from the calculation.\n\n    //adding this condition to excludre run for when the board is still loading\n    if (topScoresArray === null) {\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is the first score on the board\n    if (\n        topScoresArray.length === 0\n        && score !== 0\n    ) {\n        newRecordSet = true;\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is the new highest score on the board\n    if (score >= topScoresArray[0]) {\n        newRecordSet = true;\n        whichIndex = 0;\n        return [newRecordSet, whichIndex];\n    }\n\n    // if this is not a new top score, but the board is not full yet\n    if (\n        !newRecordSet\n        && topScoresArray.length < boardLength\n        && score !== 0\n    ) {\n        newRecordSet = true;\n        return [newRecordSet, whichIndex];\n    }\n    \n    if (topScoresArray.length !== 0) {\n        const [minNum, minNumsCount] = getCountOfMinNums(topScoresArray);\n        // for everything else\n        for (\n            let i = 0;\n            i < topScoresArray.length - 1;\n            i++\n        ) {\n            if (\n                score < topScoresArray[i]\n                && score >= topScoresArray[i + 1]\n                && score !== minNum\n            ) {\n                newRecordSet = true;\n                whichIndex = i + 1;\n                break;\n            } \n            else if  (\n                score === minNum\n                && minNumsCount < 1\n            ) {\n                newRecordSet = true;\n                whichIndex = i + 1;\n                break; \n            }\n        }\n    }\n\n    return [newRecordSet, whichIndex];\n}\n\n\nexport const handleSubmit = (event, userName, whichIndex, itemAtIndex, score, dispatch) => {\n    event.preventDefault();\n\n    if (userName.trim().length === 0) \n        alert('You can\\'t submit a blank form!');\n\n    // run through regex\n    const isOnlyStandardChars = /^[a-zA-Z1-9-_*$]+$/.test(userName);\n\n    if (!isOnlyStandardChars) {\n        alert('You can only use a-z, A-Z, 1-9, -, _ , * ,$ characters.');\n    } else {\n        const confirmUserName = prompt(`Submitting you score under userName: ${userName}? (yes/no)`);\n\n        if (confirmUserName === null) {\n            alert('You are a picky one!\\nChange your name or restart the game!')\n\n        } else if (confirmUserName.toLowerCase() === 'yes') {\n            alert('sweet!');\n            dispatch(setNewScoreThunk(userName, score, 'sergey', 10));\n        }   \n    }\n}","import { getScoreboardRows, postNewScore } from '../requests.js';\nimport { getTopSortedScores, getOnlyScores } from '../features/scoreboard/scoreboardUtils.js';\n\n// ACTIONS //\nconst addOne = () => {\n    return {\n        type: 'ADD_ONE',\n        value: 1\n    }\n}\n\nconst updateMageSquare = (type, curPos, newPos, img) => {\n    return {\n        type: type,\n        currentMagePos: curPos,\n        newMagePos: newPos,\n        img: img\n    }\n}\n\nconst updateMagePos = (newPos) => {\n    return {\n        type: 'UPDATE_MAGE_POS',\n        mage: 'mage',\n        position: newPos\n    }\n}\n\nconst updateCoinSquare = (\n    type,\n    curMagePos,\n    newMagePos,\n    newCoinPos,\n    img,\n    coinImg\n) => {\n    return {\n        type: `${type}_COIN_RESET`,\n        currentMagePos: curMagePos,\n        newMagePos: newMagePos,\n        newCoinPos: newCoinPos,\n        img: img,\n        coinImg: coinImg\n    }\n}\n\nconst updateCoinMagePos = (newMagePos, newCoinPos) => {\n    return {\n        type: 'UPDATE_BOTH',\n        mage: 'mage',\n        magePos: newMagePos,\n        coin: 'coin',\n        coinPos: newCoinPos\n    }\n}\n\n// ACTION CREATORS //\nexport const gameOver = () => dispatch => {\n    dispatch({\n        type: 'GAME_OVER',\n        isOver: true\n    });\n}\n\nexport const decrementTimer = (timerId) => dispatch => {\n    dispatch({\n        type: 'DECREMENT_COUNTER',\n        timerId: timerId\n    });\n}\n\nexport const updateStateWhenScored = (\n    type,\n    curMagePos,\n    newMagePos,\n    newCoinPos,\n    img,\n    coinImg,\n) => dispatch => {\n    dispatch(\n        updateCoinSquare(\n            type,\n            curMagePos,\n            newMagePos,\n            newCoinPos,\n            img,\n            coinImg\n        )\n    );\n    dispatch(\n        updateCoinMagePos(\n            newMagePos,\n            newCoinPos\n        )\n    );\n    dispatch(\n        addOne()\n    );\n}\n\nexport const updateStateWhenMove = (\n    type,\n    curMagePos,\n    newMagePos,\n    img,\n) => dispatch => {\n    dispatch(\n        updateMageSquare(\n            type,\n            curMagePos,\n            newMagePos,\n            img,\n        )\n    );\n    dispatch(\n        updateMagePos(newMagePos)\n    );\n}\n\nexport const setScoreboard = (scoreBoardRows) => dispatch => {\n    dispatch({\n        type: \"SET_SCOREBOARD\",\n        scoreBoardRows: scoreBoardRows\n    })\n}\n\nexport const setTopScores = (topScores) => dispatch => {\n    dispatch({\n        type: 'SET_TOP_SCORES',\n        scores: topScores\n    })\n}\n\n// get the response from the api, use func to process data...\n// ...save processed data to the redux store.\nexport const getScoreBoardThunk = (partitionKey, howMany) => dispatch => {\n    getScoreboardRows(partitionKey)\n        .then(response => getTopSortedScores(response.data, howMany))\n        .then(processedData => {\n            dispatch(setScoreboard(processedData));\n            return getOnlyScores(processedData);\n\n        }).then(onlyScores => dispatch(setTopScores(onlyScores))\n        ).catch(err => alert(`Ops! Something is Wrong with the Scoreboard load:${err.message}`));\n}\n\n// set new score in the table and re-generate scoreboard\nexport const setNewScoreThunk = (userName, score, partitionKey, howMany) => dispatch => {\n    postNewScore(userName, score)\n        .then(response => {\n            if (response.status === 200) return response\n        }).then(() => {\n            dispatch(\n                getScoreBoardThunk(\n                    partitionKey, \n                    howMany\n            )\n        )}).then(() => {\n            dispatch(\n                swapScoreBoard(\n                    false\n                )\n            )\n        }).catch(\n            err => alert(`Ops! Something is Wrong with a new score upload:${err.message}`)\n        );\n}\n\nexport const swapScoreBoard = (isSwap) => dispatch => {\n    dispatch({\n        type: \"SWAP_SCOREBOARD\",\n        doSwap: isSwap\n    })\n}\n\nexport const setUserName = (userName) => dispatch => {\n    dispatch({\n        type: \"SET_USER_NAME\",\n        userName: userName\n    })\n}\n\nexport const setKeysDown = (keyId, isKeyDown) => dispatch => {\n    const type = isKeyDown ? \"BUTTON_KEY_DOWN\" : \"BUTTON_KEY_UP\";\n    dispatch({\n        type: type,\n        keyId: keyId\n    })\n}\n","import * as axios from 'axios';\nimport {\n    SCOREBOARD_RESULTS_ENDPOINT,\n    POST_NEW_SCORE_ENDPOINT,\n    PARTITION_KEY\n} from \"./constants.js\"\n\nexport const getScoreboardRows = (partitionKey) => {\n    try {\n        return (\n            axios.get(\n                SCOREBOARD_RESULTS_ENDPOINT,\n                {\n                    params: { partitionKey: partitionKey }\n                }\n            )\n        )\n                \n    } catch (error) {\n        console.log(`Request was not successful. Error:${error}`)\n    }\n}\n\nexport const postNewScore = (userName, score) => {\n    console.log('hi');\n    try {\n        return (\n            axios.get(\n                POST_NEW_SCORE_ENDPOINT,\n                {\n                    params: { \n                        'partitionKey': PARTITION_KEY,\n                        'userName' : userName,\n                        'score' : score\n                    }\n                }\n            )\n        )\n                \n    } catch (error) {\n        console.log(`Request was not successful. Error:${error}`)\n    }\n}","import { useDispatch, useSelector } from \"react-redux\";\nimport { swapScoreBoard, setUserName } from '../../redux/actions.js';\nimport * as ScoreBoardUtils from \"./scoreboardUtils.js\"\nimport * as Constants from '../../constants.js';\nimport React from 'react';\n\nexport const Scoreboard = () => {\n    const dispatch = useDispatch();\n    const score = useSelector(store => store.score);\n    const scoreBoardResults = useSelector(store => store.scoreboard);\n    const onlyScores = useSelector(store => store.topScores);\n    const doSwap = useSelector(store => store.swapScoreBoard);\n\n    React.useEffect(() => {\n        const resultArr = ScoreBoardUtils.checkForNewRecord(\n            score,\n            onlyScores,\n            Constants.scoreBoardLength\n        );\n        const newRecordSet = resultArr[0];\n    \n        if (newRecordSet) {\n            dispatch(\n                swapScoreBoard(true)\n            );\n        }\n        \n    }, [dispatch, score]);\n\n    const rowElements = ScoreBoardUtils.getRowElements(\n        scoreBoardResults,\n        Score\n    );\n\n    const resultArr = ScoreBoardUtils.checkForNewRecord(\n        score,\n        onlyScores,\n        Constants.scoreBoardLength\n    );\n    const whichIndex = resultArr[1];\n\n\n    if (doSwap) {\n        return (\n            <NameForm\n                whichIndex={whichIndex}\n                itemAtIndex={scoreBoardResults[whichIndex]}\n                score={score}\n            />\n        )\n    } else {\n        return (\n            <div className='table'>\n                <div className='header'>scoreboard</div>\n                <div className='column-headers'>\n                    <div className='row-sub' id=\"index\">\n                        Place\n                    </div>\n                    <div className='row-sub' id=\"name\">\n                        User\n                    </div>\n                    <div className='row-sub' id=\"score\">\n                        Score\n                    </div>\n                </div>\n                {rowElements}\n            </div>\n        )\n    }\n}\n\n\nconst Score = (props) => {\n    return (\n        <div className='row'>\n            <div className='row-sub' id=\"index\">\n                {props.index}\n            </div>\n            <div className='row-sub' id=\"name\">\n                {props.user}\n            </div>\n            <div className='row-sub' id=\"score\">\n                {props.score}\n            </div>\n        </div>\n    )\n}\n\n\n\nconst NameForm = (props) => {\n    const dispatch = useDispatch();\n    const userName = useSelector(store => store.userName);\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isSubmit = event.keyCode === 13\n                ? true\n                : false;\n    \n\n            if (isSubmit) {\n                ScoreBoardUtils.handleSubmit(\n                    event, \n                    userName,\n                    props.whichIndex,\n                    props.itemAtIndex,\n                    props.score,\n                    dispatch\n                );\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [dispatch, props, userName]);\n\n    return (\n        <div className='winner'>\n            <div className='congrats'>\n                <h1>Congrats on setting a new Record!</h1>\n            </div>\n            <form onSubmit={\n                event => ScoreBoardUtils.handleSubmit(\n                    event, \n                    userName,\n                    props.whichIndex,\n                    props.itemAtIndex,\n                    props.score,\n                    dispatch\n                )}>\n                <label>\n                    How should we write you down in History?\n                    <br></br>\n                    <input \n                        type='text' \n                        onChange={event => dispatch(\n                            setUserName(event.target.value)\n                        )}\n                    />\n                </label>\n                <br></br>\n                <button className='submit' type='Submit'>\n                    submit\n                </button>\n            </form>\n        </div>\n    )\n}\n","import * as Constants from '../constants.js';\nimport { GameOver } from '../features/game-over/gameOver.js';\nimport { Scoreboard } from '../features/scoreboard/scoreboard.js';\n\n\nexport const getInitState = (size, startingPos, mage, coin) => {\n    const coinPos = generateCoinPos(startingPos, size);\n    const boardSize = Math.pow(size, 2);\n    const initObj = {};\n\n    const initState = Array(boardSize).fill(null).reduce(\n        (obj, item, index) => {\n\n            const setMage = startingPos === index\n                ? mage\n                : null;\n\n            const setCoin = coinPos === index\n                ? coin\n                : null;\n\n            const squareObj = {\n                value: null,\n                id: index,\n                mage: setMage,\n                coin: setCoin\n            };\n\n            return {\n                ...obj,\n                [index]: squareObj\n            };\n        }, initObj\n    );\n\n    return [initState, coinPos]\n}\n\nexport const getScoreBoard = () => {\n    \n}\n\nexport const generateBoard = (squaresObj, Square, rowLength) => {\n    const keys = Object.keys(squaresObj);\n    const board = [];\n\n    for (let i = 0; i < keys.length; i += rowLength) {\n\n        const rowEndIndex = i + rowLength;\n        let row = [];\n\n        for (let j = i; j < rowEndIndex; j++) {\n            row.push(\n                <Square\n                    key={j}\n                    id={j}\n                    squareObj={squaresObj[j]}\n                />\n            );\n        };\n\n        board.push(\n            <div key={i} className=\"board-row\">\n                {row}\n            </div>\n        );\n\n    };\n    return board;\n}\n\nexport const generateCoinPos = (magePos, size) => {\n    const boardSize = Math.pow(size, 2);\n    const coinPos = Math.floor(Math.random() * boardSize);\n\n    if (coinPos === magePos) {\n        const backUpPos = generateCoinPos(magePos, size);\n        return backUpPos;\n\n    } else {\n        return coinPos;\n    }\n}\n\nexport const renderBoard = (\n    Board,\n    isGameOver, \n    squares, \n    coinAndMagePos, \n    score, \n    timer\n) => {\n    if (isGameOver) {\n        const renderScore = renderGameOver(score);\n        const img = Constants.GAME_OVER_IMG;\n\n        return (\n            <div>\n                <GameOver\n                    img={img}\n                    renderScore={renderScore}\n                />\n                <Scoreboard />\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"game-board\">\n                <div className=\"score\"><h2>Score: {score}</h2></div>\n                <div className=\"timer\"><h2>Time: {timer}</h2></div>\n                <Board\n                    class=\"board\"\n                    squares={squares}\n                    coinAndMagePos={coinAndMagePos}\n                    img={Constants.IMG}\n                    coinImg={Constants.COIN}\n                    timer={timer}\n                />\n                {/* <ButtonPanel\n                    coinAndMagePos={coinAndMagePos}\n                    img={Constants.IMG}\n                    coinImg={Constants.COIN}\n                    timer={timer}\n                /> */}\n            </div>\n        )\n    }\n}\n\nexport const renderInstructions = () => {\n    return (\n        <div className=\"instructions\">\n            <h1>DOGE Fairy Game!</h1>\n            <h2>Rules:</h2>\n            <h3>1. Use keyboard arrows (← ↑ ↓ →) to move your Fairy</h3>\n            <h3>1. Use Enter key to restart</h3>\n            <h3>2. If you move over the edge it's game over</h3>\n            <h3>3. Collect as many DOGE in 60 sec to fly to the moon!</h3>\n        </div>\n    )\n}\n\nconst renderGameOver = (score) => {\n    const msg = getScoreMessage(score);\n\n    return (\n        <div className=\"finalScore\">\n            <h2>Your Score: {score}</h2>\n            <h3>{msg}</h3>\n        </div>\n    )\n}\n\nconst getScoreMessage = (score) => {\n    let msg = null;\n\n    if (score >= 0) msg='Try harder next time!';\n    if (score > 5) msg='Are you sure you are using keyboard?';\n    if (score > 10) msg='Your rocket crashed back on Earth!';\n    if (score > 20) msg='I can see DODG high in the sky!';\n    if (score > 50) msg='You are really good at this!';\n    if (score > 100) msg='TO THE MOOOON!';\n\n    return msg;\n}","import * as Constants from '../constants.js';\nimport { getInitState } from '../utils/utils.js';\n\n// since coinPos is a random number, need to\n// return it back from InitState func\nconst [initState, coinPos] = getInitState(\n    Constants.BOARD_SIZE,\n    Constants.MAGE_START_POS,\n    Constants.IMG,\n    Constants.COIN\n);\n\nconst initPositions = {\n    'mage': Constants.MAGE_START_POS,\n    'coin': coinPos\n};\n\nconst initTimer = {\n    'time': 60,\n    'timerId': null\n};\n\n\nconst initKeysPressed = {};\nObject.keys(Constants.KEY_DOWN_SET_UP).forEach(\n    key => {\n        initKeysPressed[key] = {\n            pressed : Constants.KEY_DOWN_SET_UP[key].pressed\n        }\n    }\n)\n\n\n// each square calls this and gets updated state\nexport const squares = (state = initState, action) => {\n    switch (action.type) {\n        case \"MOVE_UP\":\n        case \"MOVE_DOWN\":\n        case \"MOVE_RIGHT\":\n        case \"MOVE_LEFT\":\n            return {\n                ...state,\n                [action.currentMagePos]: {\n                    ...state[action.currentMagePos],\n                    mage: null\n                },\n                [action.newMagePos]: {\n                    ...state[action.newMagePos],\n                    mage: action.img\n                }\n            }\n        case \"MOVE_UP_COIN_RESET\":\n        case \"MOVE_DOWN_COIN_RESET\":\n        case \"MOVE_RIGHT_COIN_RESET\":\n        case \"MOVE_LEFT_COIN_RESET\":\n            return {\n                ...state,\n                [action.currentMagePos]: {\n                    ...state[action.currentMagePos],\n                    mage: null\n                },\n                [action.newMagePos]: {\n                    ...state[action.newMagePos],\n                    mage: action.img,\n                    coin: null\n                },\n                [action.newCoinPos]: {\n                    ...state[action.newCoinPos],\n                    coin: action.coinImg,\n                    mage: null\n                }\n            }\n        case \"RESET\":\n            return initState;\n        default:\n            return state\n    }\n};\n\nexport const coinAndMagePos = (state = initPositions, action) => {\n    switch (action.type) {\n        case \"UPDATE_BOTH\":\n            return {\n                ...state,\n                [action.coin]: action.coinPos,\n                [action.mage]: action.magePos\n            }\n        case \"UPDATE_MAGE_POS\":\n            return {\n                ...state,\n                [action.mage]: action.position\n            }\n        case \"UPDATE_COIN_POS\":\n            return {\n                ...state,\n                [action.coin]: action.position\n            }\n        case \"RESET\":\n            return initPositions;\n        default:\n            return state\n    };\n}\n\nexport const gameOver = (state = false, action) => {\n    switch (action.type) {\n        case \"GAME_OVER\":\n            return action.isOver;\n        case \"RESET\":\n            return false;\n        default:\n            return state\n    };\n}\n\nexport const score = (state = 0, action) => {\n    switch (action.type) {\n        case \"ADD_ONE\":\n            return state + action.value;\n        case \"RESET\":\n            return 0;\n        default:\n            return state;\n    }\n}\n\nexport const timer = (state = initTimer, action) => {\n    switch (action.type) {\n        case \"DECREMENT_COUNTER\":\n            return {\n                ...state,\n                'time': state['time'] - 1,\n                'timerId': action.timerId\n            }\n        case \"RESET\":\n            return initTimer;\n        default:\n            return state;\n    }\n}\n\nexport const scoreboard = (state = [], action) => {\n    switch (action.type) {\n        case \"SET_SCOREBOARD\":\n            return action.scoreBoardRows;\n        default:\n            return state;\n    }\n}\n\n// setting init state to null to catch..\n// when the board is loading, but the function to calc...\n// the new record has run...\n// added this handler to the checkForNewRecord func...\n// and in case the board contains no records == []\nexport const topScores = (state = null, action) => {\n    switch (action.type) {\n        case \"SET_TOP_SCORES\":\n            return action.scores;\n        default:\n            return state;\n    }\n}\n\nexport const swapScoreBoard = (state = false, action) => {\n    switch (action.type) {\n        case \"SWAP_SCOREBOARD\":\n            return action.doSwap;\n        case \"RESET\":\n            return false;\n        default:\n            return state;\n    }\n}\n\nexport const userName = (state = '', action) => {\n    switch (action.type) {\n        case \"SET_USER_NAME\":\n            return action.userName;\n        case \"RESET\":\n            return '';\n        default:\n            return state;\n    }\n}\n\nexport const keysPressed = (state = initKeysPressed, action) => {\n    console.log(action);\n    switch (action.type) {\n        case \"BUTTON_KEY_DOWN\":\n            return {\n                ...state,\n                [action.keyId] : {\n                    pressed : true\n                }\n            }\n        case \"BUTTON_KEY_UP\":\n            return {\n                ...state,\n                [action.keyId] : {\n                    pressed : false\n                }\n            }\n        case \"RESET\":\n            return initKeysPressed;\n        default:\n            return state;\n    }\n}","import * as Reducers from './reducers.js'\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk'\n\nconst rootReducer = combineReducers({\n    squares: Reducers.squares,\n    coinAndMagePos: Reducers.coinAndMagePos,\n    gameOver: Reducers.gameOver,\n    score: Reducers.score,\n    timer: Reducers.timer,\n    scoreboard: Reducers.scoreboard,\n    topScores: Reducers.topScores,\n    swapScoreBoard: Reducers.swapScoreBoard,\n    userName: Reducers.userName,\n    keysPressed: Reducers.keysPressed\n});\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n);\n\nexport { store };","\nexport const Square = (props) => {\n    const squareObj = props.squareObj;\n\n    const mage = getImage(\"mage\", squareObj.mage);\n    const coin = getImage(\"coin\", squareObj.coin);\n\n    return (\n        <div className='square' id={props.id} >\n            {mage || coin}\n        </div>\n    );\n};\n\nconst getImage = (whichImage, image) => {\n    switch (whichImage) {\n        case \"mage\":\n            const mage = image\n                ? <img src={image} \n                       style={{ width: \"100%\", height: \"100%\" }}\n                       alt='mage' />\n                : null;\n            return mage;\n        case \"coin\":\n            const coin = image\n                ? <img src={image} \n                       style={{ width: \"50%\", height: \"50%\" }}\n                       alt='coin' />\n                : null;\n            return coin;\n        default:\n            return null;\n    }\n}","import * as Constants from \"../../constants.js\"\nimport { generateCoinPos } from \"../../utils/utils.js\";\nimport * as Actions from \"../../redux/actions.js\"\n\n\nexport const buttonSetUp = (Button, props) => {\n    const buttons = Object.keys(Constants.BUTTON_SETUP).map(key => {\n        const buttonObj = Constants.BUTTON_SETUP[key];\n\n        return (\n            <Button\n                key={key}\n                class='button'\n                value={key}\n                makeMove={makeMove}\n                coinAndMagePos={props.coinAndMagePos}\n                buttonObj={buttonObj}\n                img={props.img}\n                coinImg={props.coinImg}\n                timer={props.timer}\n            />\n        )\n    })\n\n    return buttons;\n}\n\nexport const makeMove = (coinAndMagePos, img, coinImg, obj, dispatch, timer) => {\n    if (timer === 60) startDecrementCounter(timer, dispatch); // start time ticks on first move\n    \n    // do a check to see if we have gone over the boarder first\n    const currentMagePos = coinAndMagePos.mage;\n    const posChange = obj['posChange'];\n    const type = obj['type'];\n\n    const newMagePos = currentMagePos - posChange;\n    const isScored = hasScored(coinAndMagePos, posChange);\n\n\n    const isGameOver = isOutOfRange(currentMagePos, posChange);\n    if (isGameOver) {\n        dispatch(\n            Actions.gameOver()\n        );\n    } else if (isScored) {\n        const newCoinPos = generateCoinPos(newMagePos, Constants.BOARD_SIZE);\n        dispatch(\n            Actions.updateStateWhenScored(\n                type,\n                currentMagePos,\n                newMagePos,\n                newCoinPos,\n                img,\n                coinImg\n            )\n        );\n    } else {\n        dispatch(\n            Actions.updateStateWhenMove(\n                type,\n                currentMagePos,\n                newMagePos,\n                img\n            )\n        );\n    }\n}\n\nconst startDecrementCounter = (timer, dispatch) => {\n    timer--;\n    dispatch(\n        Actions.decrementTimer()\n    );\n\n    let timerId = setTimeout(function tick() {\n        if (timer === 0) {\n            dispatch(\n                Actions.gameOver()\n            );\n        } else {\n            timer--;\n            timerId = setTimeout(tick, 1000);\n            dispatch(\n                Actions.decrementTimer(timerId)\n            );\n        }\n    }, 1000);\n}\n\nconst isOutOfRange = (magePos, posChange) => {\n    const outRangeList = Constants.OUT_OF_RANGE_SETUP[`${posChange}`];\n    return outRangeList.includes(magePos);\n}\n\n\nconst hasScored = (coinAndMagePos, posChange) => {\n    const newMagePos = coinAndMagePos.mage - posChange;\n    const result = newMagePos === coinAndMagePos.coin\n        ? true\n        : false;\n    return result;\n}\n","import React from 'react';\n\nimport * as Utils from '../../utils/utils.js';\nimport * as Constants from '../../constants.js';\nimport { Square } from '../../features/square/square.js';\nimport { makeMove } from '../../features/button-controls/buttonUtils.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setKeysDown } from '../../redux/actions.js';\n\nexport const Board = (props) => {\n    // adding here since this components unmounts if we lose the game\n    // const keysState = useSelector(store => store.keysPressed);\n    const dispatch = useDispatch();\n    const keyDowns = useSelector(store => store.keysPressed); \n    \n    React.useEffect(() => {\n        const handleKeyDown = (e) => {\n            dispatch(\n                setKeysDown(\n                    e.keyCode,\n                    true    \n                )\n            );\n        }\n        window.addEventListener('keydown', handleKeyDown);\n\n        const handleKeyUp = (e) => {\n            dispatch(\n                setKeysDown(\n                    e.keyCode,\n                    false\n                )\n            );\n        }\n        window.addEventListener('keyup', handleKeyUp);\n\n        const registerMove = (event) => {\n             // only accept single keyDown as a move made.\n            const isMoveMade = checkForKeys(keyDowns);\n\n            const keysFromSetUp = Constants.KEY_DOWN_SET_UP;\n            const isInCodes = Object.keys(keysFromSetUp).includes(`${event.keyCode}`)\n                ? true\n                : false;\n    \n            if (isMoveMade && isInCodes) {\n                const keyObj = Constants.KEY_DOWN_SET_UP[`${event.keyCode}`];\n                makeMove(\n                    props.coinAndMagePos,\n                    props.img,\n                    props.coinImg,\n                    keyObj,\n                    dispatch,\n                    props.timer\n                );\n            }\n        }\n        window.addEventListener('keyup', registerMove);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener('keydown', handleKeyDown);\n            window.removeEventListener('keyup', registerMove);\n            window.removeEventListener('keyup', handleKeyUp);\n        };\n\n    }, [dispatch, props, keyDowns]);\n\n\n    const board = Utils.generateBoard(\n        props.squares,\n        Square,\n        Constants.BOARD_SIZE\n    );\n\n    return (\n        <div className={props.class}>\n            {board}\n        </div>\n    );\n}\n\nconst checkForKeys = (keysState) => {\n    let keysPressed = 0;\n    Object.keys(keysState).forEach(\n        key => {\n            if (keysState[key].pressed === true) {\n                keysPressed += 1;\n            }\n    });\n\n    const isMoveMade = keysPressed === 1 ? true : false;\n    return [isMoveMade];\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/button-controls.css';\n\nimport { store } from './redux/store.js'\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport * as Utils from './utils/utils.js';\nimport * as Constants from './constants.js';\nimport { getScoreBoardThunk } from './redux/actions.js'\nimport { Board } from './features/board/board.js';\n\n\n\nconst Game = () => {\n    const score = useSelector(store => store.score);\n    const dispatch = useDispatch();\n    const isGameOver = useSelector(store => store.gameOver);\n    const squares = useSelector(store => store.squares);\n    const coinAndMagePos = useSelector(store => store.coinAndMagePos);\n    const timer = useSelector(store => store.timer.time);\n    const timerId = useSelector(store => store.timer.timerId);\n    const doSwap = useSelector(store => store.doSwap);\n\n    React.useEffect(() => {\n        // get top scores, sort then, and save in store\n        // doSwap is set if a new score record is achieved\n        // it is reset to false when a record has successfully commited\n        // to store. In this case, we need results re-render.\n        if(!doSwap)\n            dispatch(\n                getScoreBoardThunk(\n                    Constants.PARTITION_KEY,\n                    Constants.scoreBoardLength\n                )\n            );\n    }, [dispatch, doSwap]);\n\n    const render = Utils.renderBoard(\n        Board,\n        isGameOver,\n        squares,\n        coinAndMagePos,\n        score,\n        timer\n    );\n\n\n    let renderInstructions = Utils.renderInstructions();\n\n\n    if (isGameOver)  {\n        clearTimeout(timerId);\n        renderInstructions = null;\n    }\n\n    return (\n        <div className=\"game\">\n            {render}\n            {renderInstructions}\n        </div>\n    );\n}\n\n// ========================================\n\nReactDOM.render(\n    <Provider store={store}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}