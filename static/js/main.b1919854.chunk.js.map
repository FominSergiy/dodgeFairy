{"version":3,"sources":["constants.js","actions.js","features/button-controls/buttonUtils.js","features/game-over/gameOver.js","utils/utils.js","reducer.js","features/square/square.js","index.js"],"names":["IMG","COIN","KEY_DOWN_SET_UP","type","posChange","OUT_OF_RANGE_SETUP","decrementTimer","timerId","dispatch","makeMove","coinAndMagePos","img","coinImg","obj","timer","startDecrementCounter","currentMagePos","mage","newMagePos","isScored","hasScored","isOutOfRange","isOver","curMagePos","newCoinPos","updateCoinSquare","magePos","coin","coinPos","updateCoinMagePos","value","Actions","generateCoinPos","curPos","newPos","updateMageSquare","position","setTimeout","tick","Constants","includes","GameOver","props","useDispatch","React","useEffect","handleKeyDown","event","keyCode","window","addEventListener","removeEventListener","className","src","style","width","height","alt","renderScore","onClick","size","boardSize","Math","pow","floor","random","renderGameOver","score","msg","getScoreMessage","startingPos","Array","fill","reduce","item","index","squareObj","id","getInitState","initState","initPositions","initTimer","rootReducer","combineReducers","squares","state","action","gameOver","store","createStore","applyMiddleware","thunkMiddleware","Square","getImage","whichImage","image","Board","Object","keys","keyObj","board","squaresObj","rowLength","i","length","rowEndIndex","row","j","push","Utils","class","Game","useSelector","isGameOver","time","render","renderInstructions","clearTimeout","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b1919854.chunk.js","sourcesContent":["export const BOARD_SIZE = 5;\nexport const MAGE_START_POS = 12;\nexport const IMG = \"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/e32c26ba-2bab-4113-ae4d-2e0fddb012f3/dbhkef2-0480b859-092c-47fc-ba78-5f299736997e.gif?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcL2UzMmMyNmJhLTJiYWItNDExMy1hZTRkLTJlMGZkZGIwMTJmM1wvZGJoa2VmMi0wNDgwYjg1OS0wOTJjLTQ3ZmMtYmE3OC01ZjI5OTczNjk5N2UuZ2lmIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.tNrQD0-ER3hxMGn67aqGJm8fSUcTuDFEkXtLgYT9SfU\";\nexport const COIN = \"./dodg.gif\";\nexport const GAME_OVER_IMG = './gameOverGirl.png';\n\nexport const BUTTON_SETUP = {\n    left: {\n        type: 'MOVE_LEFT',\n        posChange: 1\n    },\n    up: {\n        type: 'MOVE_UP',\n        posChange: 5\n    },\n    right: {\n        type: 'MOVE_RIGHT',\n        posChange: -1\n    },\n    down: {\n        type: 'MOVE_DOWN',\n        posChange: -5\n    }\n}\n\nexport const KEY_DOWN_SET_UP = {\n    '37': {\n        type: 'MOVE_LEFT',\n        posChange: 1\n    },\n    '38': {\n        type: 'MOVE_UP',\n        posChange: 5\n    },\n    '39': {\n        type: 'MOVE_RIGHT',\n        posChange: -1\n    },\n    '40': {\n        type: 'MOVE_DOWN',\n        posChange: -5\n    }\n}\n\n//range of indexes moving from which\n//we will get out of range and game will be over\nexport const OUT_OF_RANGE_SETUP = {\n    \"1\": [0, 5, 10, 15, 20],\n    \"5\": [0, 1, 2, 3, 4],\n    \"-1\": [4, 9, 14, 19, 24],\n    \"-5\": [20, 21, 22, 23, 24]\n};\n","\n// ACTIONS //\nconst addOne = () => {\n    return {\n        type: 'ADD_ONE',\n        value: 1 \n    }\n}\n\nconst updateMageSquare = (type, curPos, newPos, img) => {\n    return {\n        type: type,\n        currentMagePos: curPos,\n        newMagePos: newPos,\n        img: img\n    }\n}\n\nconst updateMagePos = (newPos) => {\n    return {\n        type: 'UPDATE_MAGE_POS',\n        mage: 'mage',\n        position: newPos\n    }\n}\n\nconst updateCoinSquare = (\n    type, \n    curMagePos, \n    newMagePos,\n    newCoinPos, \n    img, \n    coinImg\n) => {\n    return {\n        type: `${type}_COIN_RESET`,\n        currentMagePos: curMagePos,\n        newMagePos: newMagePos,\n        newCoinPos: newCoinPos,\n        img: img,\n        coinImg: coinImg\n    }\n}\n\nconst updateCoinMagePos = (newMagePos, newCoinPos) => {\n    return {\n        type: 'UPDATE_BOTH',\n        mage: 'mage',\n        magePos: newMagePos,\n        coin: 'coin',\n        coinPos: newCoinPos\n    }\n}\n\n// ACTION CREATORS //\nexport const gameOver = () => dispatch => {\n    dispatch({\n        type: 'GAME_OVER',\n        isOver: true\n    });\n}\n\nexport const decrementTimer = (timerId) => dispatch => {\n    dispatch({\n        type: 'DECREMENT_COUNTER',\n        timerId: timerId\n    });\n}\n\nexport const updateStateWhenScored = (\n    type, \n    curMagePos, \n    newMagePos, \n    newCoinPos, \n    img, \n    coinImg,\n) => dispatch => {\n    dispatch(\n        updateCoinSquare(\n            type, \n            curMagePos, \n            newMagePos, \n            newCoinPos, \n            img, \n            coinImg\n        )\n    );\n    dispatch(\n        updateCoinMagePos(\n            newMagePos,\n            newCoinPos\n        )\n    );\n    dispatch(\n        addOne()\n    );\n}\n\nexport const updateStateWhenMove = (\n    type, \n    curMagePos, \n    newMagePos,  \n    img,\n) => dispatch => {\n    dispatch(\n        updateMageSquare(\n            type, \n            curMagePos, \n            newMagePos,  \n            img,\n        )\n    );\n    dispatch(\n        updateMagePos(newMagePos)\n    );\n}","import * as Constants from \"../../constants.js\"\nimport { generateCoinPos } from \"../../utils/utils.js\";\nimport * as Actions from \"../../actions.js\"\n\n\nexport const buttonSetUp = (Button, props) => {\n    const buttons = Object.keys(Constants.BUTTON_SETUP).map(key => {\n        const buttonObj = Constants.BUTTON_SETUP[key];\n\n        return (\n            <Button\n                key={key}\n                class='button'\n                value={key}\n                makeMove={makeMove}\n                coinAndMagePos={props.coinAndMagePos}\n                buttonObj={buttonObj}\n                img={props.img}\n                coinImg={props.coinImg}\n                timer={props.timer}\n            />\n        )\n    })\n\n    return buttons;\n}\n\nexport const makeMove = (coinAndMagePos, img, coinImg, obj, dispatch, timer) => {\n    if (timer === 60) startDecrementCounter(timer, dispatch); // start time ticks on first move\n    \n    // do a check to see if we have gone over the boarder first\n    const currentMagePos = coinAndMagePos.mage;\n    const posChange = obj['posChange'];\n    const type = obj['type'];\n\n    const newMagePos = currentMagePos - posChange;\n    const isScored = hasScored(coinAndMagePos, posChange);\n\n\n    const isGameOver = isOutOfRange(currentMagePos, posChange);\n    if (isGameOver) {\n        dispatch(\n            Actions.gameOver()\n        );\n    } else if (isScored) {\n        const newCoinPos = generateCoinPos(newMagePos, Constants.BOARD_SIZE);\n        dispatch(\n            Actions.updateStateWhenScored(\n                type,\n                currentMagePos,\n                newMagePos,\n                newCoinPos,\n                img,\n                coinImg\n            )\n        );\n    } else {\n        dispatch(\n            Actions.updateStateWhenMove(\n                type,\n                currentMagePos,\n                newMagePos,\n                img\n            )\n        );\n    }\n}\n\nconst startDecrementCounter = (timer, dispatch) => {\n    timer--;\n    dispatch(\n        Actions.decrementTimer()\n    );\n\n    let timerId = setTimeout(function tick() {\n        if (timer === 0) {\n            dispatch(\n                Actions.gameOver()\n            );\n        } else {\n            timer--;\n            timerId = setTimeout(tick, 1000);\n            dispatch(\n                Actions.decrementTimer(timerId)\n            );\n        }\n    }, 1000);\n}\n\nconst isOutOfRange = (magePos, posChange) => {\n    const outRangeList = Constants.OUT_OF_RANGE_SETUP[`${posChange}`];\n    return outRangeList.includes(magePos);\n}\n\n\nconst hasScored = (coinAndMagePos, posChange) => {\n    const newMagePos = coinAndMagePos.mage - posChange;\n    const result = newMagePos === coinAndMagePos.coin\n        ? true\n        : false;\n    return result;\n}\n","import { useDispatch } from \"react-redux\";\nimport React from 'react';\n\nexport const GameOver = (props) => {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const isReset = event.keyCode === 13\n                ? true\n                : false;\n    \n            if (isReset) {\n                dispatch({\n                    type: 'RESET',\n                })\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n\n    }, [dispatch]);\n\n    return (\n        <div className=\"game-board\">\n                <div className=\"board lost\">\n                    <img src={props.img} \n                         style={{ width: \"25%\", height: \"25%\" }} \n                         alt='nothing'\n                    />\n                    {props.renderScore}\n                </div>\n                <button className=\"resetButton\" onClick={() =>\n                    dispatch({\n                        type: 'RESET',\n                    })\n                }>restart</button>\n        </div>\n    )\n}","import * as Constants from '../constants.js';\nimport { ButtonPanel } from '../features/button-controls/buttons.js';\nimport { GameOver } from '../features/game-over/gameOver.js';\n\n\nexport const getInitState = (size, startingPos, mage, coin) => {\n    const coinPos = generateCoinPos(startingPos, size);\n    const boardSize = Math.pow(size, 2);\n    const initObj = {};\n\n    const initState = Array(boardSize).fill(null).reduce(\n        (obj, item, index) => {\n\n            const setMage = startingPos === index\n                ? mage\n                : null;\n\n            const setCoin = coinPos === index\n                ? coin\n                : null;\n\n            const squareObj = {\n                value: null,\n                id: index,\n                mage: setMage,\n                coin: setCoin\n            };\n\n            return {\n                ...obj,\n                [index]: squareObj\n            };\n        }, initObj\n    );\n\n    return [initState, coinPos]\n}\n\nexport const generateBoard = (squaresObj, Square, rowLength) => {\n    const keys = Object.keys(squaresObj);\n    const board = [];\n\n    for (let i = 0; i < keys.length; i += rowLength) {\n\n        const rowEndIndex = i + rowLength;\n        let row = [];\n\n        for (let j = i; j < rowEndIndex; j++) {\n            row.push(\n                <Square\n                    key={j}\n                    id={j}\n                    squareObj={squaresObj[j]}\n                />\n            );\n        };\n\n        board.push(\n            <div key={i} className=\"board-row\">\n                {row}\n            </div>\n        );\n\n    };\n    return board;\n}\n\nexport const generateCoinPos = (magePos, size) => {\n    const boardSize = Math.pow(size, 2);\n    const coinPos = Math.floor(Math.random() * boardSize);\n\n    if (coinPos === magePos) {\n        const backUpPos = generateCoinPos(magePos, size);\n        return backUpPos;\n\n    } else {\n        return coinPos;\n    }\n}\n\nexport const renderBoard = (\n    Board, \n    dispatch, \n    isGameOver, \n    squares, \n    coinAndMagePos, \n    score, \n    timer\n) => {\n    if (isGameOver) {\n        const renderScore = renderGameOver(score);\n        const img = Constants.GAME_OVER_IMG;\n\n        return (\n            <GameOver\n                img={img}\n                renderScore={renderScore}\n            />\n        )\n    } else {\n        return (\n            <div className=\"game-board\">\n                <div className=\"score\"><h2>Score: {score}</h2></div>\n                <div className=\"timer\"><h2>Time: {timer}</h2></div>\n                <Board\n                    class=\"board\"\n                    squares={squares}\n                    coinAndMagePos={coinAndMagePos}\n                    img={Constants.IMG}\n                    coinImg={Constants.COIN}\n                    dispatch={dispatch}\n                    timer={timer}\n                />\n                {/* <ButtonPanel\n                    coinAndMagePos={coinAndMagePos}\n                    img={Constants.IMG}\n                    coinImg={Constants.COIN}\n                    timer={timer}\n                /> */}\n            </div>\n        )\n    }\n}\n\nexport const renderInstructions = () => {\n    return (\n        <div className=\"instructions\">\n            <h1>DOGE Fairy Game!</h1>\n            <h2>Rules:</h2>\n            <h3>1. Use keyboard arrows (← ↑ ↓ →) to move your Fairy</h3>\n            <h3>1. Use Enter key to restart</h3>\n            <h3>2. If you move over the edge it's game over</h3>\n            <h3>3. Collect as many DOGE in 60 sec to fly to the moon!</h3>\n        </div>\n    )\n}\n\nconst renderGameOver = (score) => {\n    const msg = getScoreMessage(score);\n\n    return (\n        <div className=\"finalScore\">\n            <h2>Your Score: {score}</h2>\n            <h3>{msg}</h3>\n        </div>\n    )\n}\n\nconst getScoreMessage = (score) => {\n    let msg = null;\n\n    if (score >= 0) msg='Try harder next time!';\n    if (score > 5) msg='Are you sure you are using keyboard?';\n    if (score > 10) msg='Your rocket crashed back on Earth!';\n    if (score > 20) msg='I can see DODG high in the sky!';\n    if (score > 50) msg='You are really good at this!';\n    if (score > 100) msg='TO THE MOOOON!';\n\n    return msg;\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk'\nimport * as Constants from './constants.js';\nimport { getInitState } from './utils/utils.js';\n\n// since coinPos is a random number, need to\n// return it back from InitState func\nconst [initState, coinPos] = getInitState(\n    Constants.BOARD_SIZE,\n    Constants.MAGE_START_POS,\n    Constants.IMG,\n    Constants.COIN\n);\n\nconst initPositions = {\n    'mage': Constants.MAGE_START_POS,\n    'coin': coinPos\n};\n\nconst initTimer = {\n    'time': 60,\n    'timerId': null\n};\n\n\n// each square calls this and gets updated state\nconst squares = (state = initState, action) => {\n    switch (action.type) {\n        case \"MOVE_UP\":\n        case \"MOVE_DOWN\":\n        case \"MOVE_RIGHT\":\n        case \"MOVE_LEFT\":\n            return {\n                ...state,\n                [action.currentMagePos]: {\n                    ...state[action.currentMagePos],\n                    mage: null\n                },\n                [action.newMagePos]: {\n                    ...state[action.newMagePos],\n                    mage: action.img\n                }\n            }\n        case \"MOVE_UP_COIN_RESET\":\n        case \"MOVE_DOWN_COIN_RESET\":\n        case \"MOVE_RIGHT_COIN_RESET\":\n        case \"MOVE_LEFT_COIN_RESET\":\n            return {\n                ...state,\n                [action.currentMagePos]: {\n                    ...state[action.currentMagePos],\n                    mage: null\n                },\n                [action.newMagePos]: {\n                    ...state[action.newMagePos],\n                    mage: action.img,\n                    coin: null\n                },\n                [action.newCoinPos]: {\n                    ...state[action.newCoinPos],\n                    coin: action.coinImg,\n                    mage: null\n                }\n            }\n        case \"RESET\":\n            return initState;\n        default:\n            return state\n    }\n};\n\nconst coinAndMagePos = (state = initPositions, action) => {\n    switch (action.type) {\n        case \"UPDATE_BOTH\":\n            return {\n                ...state,\n                [action.coin]: action.coinPos,\n                [action.mage]: action.magePos\n            }\n        case \"UPDATE_MAGE_POS\":\n            return {\n                ...state,\n                [action.mage]: action.position\n            }\n        case \"UPDATE_COIN_POS\":\n            return {\n                ...state,\n                [action.coin]: action.position\n            }\n        case \"RESET\":\n            return initPositions;\n        default:\n            return state\n    };\n}\n\nconst gameOver = (state = false, action) => {\n    switch (action.type) {\n        case \"GAME_OVER\":\n            return action.isOver;\n        case \"RESET\":\n            return false;\n        default:\n            return state\n    };\n}\n\nconst score = (state = 0, action) => {\n    switch (action.type) {\n        case \"ADD_ONE\":\n            return state + action.value;\n        case \"RESET\":\n            return 0;\n        default:\n            return state;\n    }\n}\n\nconst timer = (state = initTimer, action) => {\n    switch(action.type) {\n        case \"DECREMENT_COUNTER\":\n            return {\n                ...state,\n                ['time'] : state['time'] - 1,\n                ['timerId']: action.timerId \n            }\n        case \"RESET\":\n            return initTimer;\n        default:\n            return state;\n    }\n}\n\n\nconst rootReducer = combineReducers({\n    squares: squares,\n    coinAndMagePos: coinAndMagePos,\n    gameOver: gameOver,\n    score: score,\n    timer: timer\n});\n\nconst store = createStore(\n    rootReducer, \n    applyMiddleware(thunkMiddleware)\n);\n\nexport { store };","\nexport const Square = (props) => {\n    const squareObj = props.squareObj;\n\n    const mage = getImage(\"mage\", squareObj.mage);\n    const coin = getImage(\"coin\", squareObj.coin);\n\n    return (\n        <div className='square' id={props.id} >\n            {mage || coin}\n        </div>\n    );\n};\n\nconst getImage = (whichImage, image) => {\n    switch (whichImage) {\n        case \"mage\":\n            const mage = image\n                ? <img src={image} style={{ width: \"100%\", height: \"100%\" }} />\n                : null;\n            return mage;\n        case \"coin\":\n            const coin = image\n                ? <img src={image} style={{ width: \"50%\", height: \"50%\" }} />\n                : null;\n            return coin;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/button-controls.css';\n\nimport { store } from './reducer.js'\nimport { Provider } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport * as Utils from './utils/utils.js';\nimport * as Constants from './constants.js';\nimport { Square } from './features/square/square.js';\nimport { makeMove } from './features/button-controls/buttonUtils.js';\n\n\nconst Board = (props) => {\n    // adding here since this components unmounts if we lose the game\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            const keyCodes = Object.keys(Constants.KEY_DOWN_SET_UP);\n            const isMoveMade = keyCodes.includes(`${event.keyCode}`)\n                ? true\n                : false;\n    \n            if (isMoveMade) {\n                const keyObj = Constants.KEY_DOWN_SET_UP[`${event.keyCode}`];\n                makeMove(\n                    props.coinAndMagePos,\n                    props.img,\n                    props.coinImg,\n                    keyObj,\n                    props.dispatch,\n                    props.timer\n                );\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            // cleanup this component\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n\n    }, [props]);\n\n    const board = Utils.generateBoard(\n        props.squares,\n        Square,\n        Constants.BOARD_SIZE\n    );\n\n    return (\n        <div className={props.class}>\n            {board}\n        </div>\n    );\n}\n\n\nconst Game = () => {\n    const score = useSelector(store => store.score);\n    const dispatch = useDispatch();\n    const isGameOver = useSelector(store => store.gameOver);\n    const squares = useSelector(store => store.squares);\n    const coinAndMagePos = useSelector(store => store.coinAndMagePos);\n    const timer = useSelector(store => store.timer.time);\n    const timerId = useSelector(store => store.timer.timerId);\n\n    const render = Utils.renderBoard(\n        Board,\n        dispatch,\n        isGameOver,\n        squares,\n        coinAndMagePos,\n        score,\n        timer\n    );\n\n\n    let renderInstructions = Utils.renderInstructions();\n\n\n    if (isGameOver)  {\n        clearTimeout(timerId);\n        renderInstructions = null;\n    }\n\n    return (\n        <div className=\"game\">\n            {render}\n            {renderInstructions}\n        </div>\n    );\n}\n\n// ========================================\n\nReactDOM.render(\n    <Provider store={store}>\n        <Game />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}